(Theorems
(line1_1_TCC1 0
(line1_1_TCC1-1 nil 3674121159 ("" (subtype-tcc) nil nil) nil nil))
(line1_1 0
(line1_1-1 nil 3674121160 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line1_2 0
(line1_2-1 nil 3674121586 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line1_3 0
(line1_3-1 nil 3674121559 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(real_lt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line2_1 0
(line2_1-1 nil 3674122020 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(real_lt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line2_2 0
(line2_2-1 nil 3674123504 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line2_3 0
(line2_3-1 nil 3674122167 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line3_1 0
(line3_1-1 nil 3674122589 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_q const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(line3_2 0
(line3_2-1 nil 3674122604 ("" (grind :defs explicit) nil nil)
((NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(pre const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_q const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil))
shostak))
(HYSTERESIS_req_tab_TCC1 0
(HYSTERESIS_req_tab_TCC1-1 nil 3674134350
("" (cond-disjoint-tcc) nil nil) nil nil))
(HYSTERESIS_req_tab_TCC2 0
(HYSTERESIS_req_tab_TCC2-1 nil 3674134350
("" (cond-coverage-tcc) nil nil) nil nil))
(f_qh_TCC1 0
(f_qh_TCC1-1 nil 3674134350 ("" (cond-disjoint-tcc) nil nil) nil
nil))
(f_qh_TCC2 0
(f_qh_TCC2-1 nil 3674134350 ("" (cond-coverage-tcc) nil nil) nil
nil))
(f_ql_TCC1 0
(f_ql_TCC1-1 nil 3674134350 ("" (cond-disjoint-tcc) nil nil) nil
nil))
(f_ql_TCC2 0
(f_ql_TCC2-1 nil 3674134350 ("" (cond-coverage-tcc) nil nil) nil
nil))
(f_q_TCC1 0
(f_q_TCC1-1 nil 3674134350 ("" (cond-disjoint-tcc) nil nil) nil nil))
(f_q_TCC2 0
(f_q_TCC2-1 nil 3674134350 ("" (cond-coverage-tcc) nil nil) nil nil))
(LIMITS_ALARM_Safety 0
(LIMITS_ALARM_Safety-1 nil 3676819538
("" (grind :defs explicit) nil nil)
((tick type-eq-decl nil ClockTick nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(time nonempty-type-eq-decl nil Time nil)
	(NOT const-decl "[bool -> bool]" booleans nil)
	(real_lt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(next const-decl "tick" ClockTick nil)
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(f_q const-decl "bool" Theorems nil)
	(add const-decl "real" defined_operators nil)
	(f_ql const-decl "bool" Theorems nil)
	(sub const-decl "real" defined_operators nil)
	(f_qh const-decl "bool" Theorems nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_q const-decl "bool" Transitions nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil)
	(nnreal_plus_posreal_is_posreal application-judgement "posreal"
	real_types nil))
shostak))
(LIMITS_ALARM_Req 0
(no "no" 3676215913 ("" (grind :defs explicit) nil nil)
((nnreal_plus_posreal_is_posreal application-judgement "posreal"
	real_types nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(LIMITS_ALARM_get_ql const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_qh const-decl "bool" Transitions nil)
	(LIMITS_ALARM_get_q const-decl "bool" Transitions nil)
	(HYSTERESIS_get_q const-decl "bool" Transitions nil)
	(f_qh const-decl "bool" Theorems nil)
	(f_ql const-decl "bool" Theorems nil)
	(int_div const-decl "int" defined_operators nil)
	(f_q const-decl "bool" Theorems nil)
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(set_Inputs_gd const-decl "bool" Transitions nil)
	(next const-decl "tick" ClockTick nil)
	(number nonempty-type-decl nil numbers nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(real nonempty-type-from-decl nil reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(>= const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
	real_types nil)
	(minus_odd_is_odd application-judgement "odd_int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(real_lt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(NOT const-decl "[bool -> bool]" booleans nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(tick type-eq-decl nil ClockTick nil))
shostak)
(LIMITS_ALARM_Req-1 nil 3676215578
("" (grind :defs explicit)
	(("1" (postpone) nil nil) ("2" (postpone) nil nil)
	("3" (postpone) nil nil) ("4" (postpone) nil nil)
	("5" (postpone) nil nil) ("6" (postpone) nil nil)
	("7" (postpone) nil nil) ("8" (postpone) nil nil)
	("9" (postpone) nil nil) ("10" (postpone) nil nil)
	("11" (postpone) nil nil) ("12" (postpone) nil nil)
	("13" (postpone) nil nil) ("14" (postpone) nil nil)
	("15" (postpone) nil nil) ("16" (postpone) nil nil)
	("17" (postpone) nil nil) ("18" (postpone) nil nil)
	("19" (postpone) nil nil) ("20" (postpone) nil nil)
	("21" (postpone) nil nil) ("22" (postpone) nil nil)
	("23" (postpone) nil nil) ("24" (postpone) nil nil)
	("25" (postpone) nil nil) ("26" (postpone) nil nil)
	("27" (postpone) nil nil) ("28" (postpone) nil nil)
	("29" (postpone) nil nil) ("30" (postpone) nil nil)
	("31" (postpone) nil nil) ("32" (postpone) nil nil))
	nil)
nil shostak))
(LIMITS_ALARM_consistency 0
(LIMITS_ALARM_consistency-1 nil 3680537994
("" (skolem!)
	((""
	(inst +
	"LIMITS_ALARM_t_set_Alarms_val(pre!1, x!1(t!1), h!1(t!1), l!1(t!1), eps!1(t!1))")
	(("" (expand LIMITS_ALARM_t_set_Alarms)
		(("" (expand LIMITS_ALARM_t_set_Alarms_val)
		(("" (propax) nil nil)) nil))
		nil))
	nil))
	nil)
((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
	integers nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil)
	(LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil)
	(UInt type-eq-decl nil TypeDefinitions nil)
	(Int type-eq-decl nil TypeDefinitions nil)
	(< const-decl "bool" reals nil)
	(^ const-decl "real" exponentiation nil)
	(/= const-decl "boolean" notequal nil)
	(OR const-decl "[bool, bool -> bool]" booleans nil)
	(- const-decl "[numfield -> numfield]" number_fields nil)
	(<= const-decl "bool" reals nil)
	(AND const-decl "[bool, bool -> bool]" booleans nil)
	(tick type-eq-decl nil ClockTick nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(time nonempty-type-eq-decl nil Time nil)
	(>= const-decl "bool" reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(LIMITS_ALARM_t_set_Alarms_val const-decl "LIMITS_ALARM"
	Transitions nil)
	(real nonempty-type-from-decl nil reals nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number nonempty-type-decl nil numbers nil)
	(LIMITS_ALARM type-eq-decl nil State nil)
	(HYSTERESIS type-eq-decl nil State nil))
shostak))
(LIMITS_ALARM_consistency_2 0
(LIMITS_ALARM_consistency_2-1 nil 3690135398
("" (skolem!)
	(("" (inst + "LIMITS_ALARM_t_val(pre!1)") (("" (grind) nil nil))
	nil))
	nil)
((LIMITS_ALARM_t const-decl "bool" Transitions nil)
	(LIMITS_ALARM_t_val const-decl "LIMITS_ALARM" Transitions nil)
	(LIMITS_ALARM type-eq-decl nil State nil)
	(HYSTERESIS type-eq-decl nil State nil))
shostak))
(HYSTERESIS_req_tab_val_TCC1 0
(HYSTERESIS_req_tab_val_TCC1-1 nil 3680541769
("" (subtype-tcc) nil nil) nil nil))
(HYSTERESIS_req_tab_val_TCC2 0
(HYSTERESIS_req_tab_val_TCC2-1 nil 3680541769
("" (cond-disjoint-tcc) nil nil) nil nil))
(HYSTERESIS_req_tab_val_TCC3 0
(HYSTERESIS_req_tab_val_TCC3-1 nil 3680541769
("" (cond-coverage-tcc) nil nil) nil nil))
(HYSTERESIS_req_tab_val_TCC4 0
(HYSTERESIS_req_tab_val_TCC4-1 nil 3680541769
("" (termination-tcc) nil nil) nil nil))
(f_qh_val_TCC1 0
(f_qh_val_TCC1-1 nil 3680541769 ("" (cond-disjoint-tcc) nil nil) nil
nil))
(f_qh_val_TCC2 0
(f_qh_val_TCC2-1 nil 3680541769 ("" (cond-coverage-tcc) nil nil) nil
nil))
(f_ql_val_TCC1 0
(f_ql_val_TCC1-1 nil 3680541769 ("" (cond-disjoint-tcc) nil nil) nil
nil))
(f_ql_val_TCC2 0
(f_ql_val_TCC2-1 nil 3680541769 ("" (cond-coverage-tcc) nil nil) nil
nil))
(LIMITS_ALARM_cons 0
(LIMITS_ALARM_cons-1 nil 3680541774
("" (skolem!)
	((""
	(inst + "f_qh_val(x!1, h!1, eps!1)" "f_ql_val(x!1, l!1, eps!1)"
	"f_q_val((f_qh_val(x!1, h!1, eps!1)),(f_ql_val(x!1, l!1, eps!1)))")
	(("" (bddsimp)
		(("1" (expand f_q)
		(("1" (expand f_q_val) (("1" (propax) nil nil)) nil)) nil)
		("2" (expand f_ql)
		(("2" (expand f_ql_val)
			(("2" (lift-if)
			(("2" (lift-if)
				(("2" (lift-if)
				(("2" (lift-if)
					(("2" (bddsimp)
					(("1" (grind) nil nil) ("2" (grind) nil nil)
					("3" (grind) nil nil) ("4" (grind) nil nil)
					("5" (grind) nil nil) ("6" (grind) nil nil)
					("7" (grind) nil nil)
					("8" (grind)
					(("8" (grind)
					(("8" (grind)
					(("8" (grind)
					(("8"
					(grind)
					(("8"
					(expand f_ql_val)
					(("8" (grind) nil nil))
					nil))
					nil))
					nil))
					nil))
					nil))
					nil)
					("9" (grind) nil nil) ("10" (grind) nil nil)
					("11" (grind) nil nil) ("12" (grind) nil nil))
					nil))
					nil))
				nil))
				nil))
			nil))
			nil))
		nil)
		("3" (expand f_qh)
		(("3" (expand f_qh_val)
			(("3" (bddsimp)
			(("1" (grind) nil nil) ("2" (grind) nil nil)
			("3" (grind) nil nil) ("4" (grind) nil nil)
			("5" (grind) nil nil) ("6" (grind) nil nil)
			("7" (grind) nil nil) ("8" (grind) nil nil)
			("9" (grind)
				(("9" (grind)
				(("9" (expand f_qh_val) (("9" (grind) nil nil)) nil))
				nil))
				nil)
			("10" (grind) nil nil) ("11" (grind) nil nil)
			("12" (grind) nil nil))
			nil))
			nil))
		nil))
		nil))
	nil))
	nil)
((number nonempty-type-decl nil numbers nil)
	(boolean nonempty-type-decl nil booleans nil)
	(number_field_pred const-decl "[number -> boolean]" number_fields
	nil)
	(number_field nonempty-type-from-decl nil number_fields nil)
	(real_pred const-decl "[number_field -> boolean]" reals nil)
	(real nonempty-type-from-decl nil reals nil)
	(bool nonempty-type-eq-decl nil booleans nil)
	(>= const-decl "bool" reals nil)
	(time nonempty-type-eq-decl nil Time nil)
	(rational_pred const-decl "[real -> boolean]" rationals nil)
	(rational nonempty-type-from-decl nil rationals nil)
	(integer_pred const-decl "[rational -> boolean]" integers nil)
	(int nonempty-type-eq-decl nil integers nil)
	(nat nonempty-type-eq-decl nil naturalnumbers nil)
	(= const-decl "[T, T -> boolean]" equalities nil)
	(numfield nonempty-type-eq-decl nil number_fields nil)
	(* const-decl "[numfield, numfield -> numfield]" number_fields nil)
	(nonneg_real nonempty-type-eq-decl nil real_types nil)
	(> const-decl "bool" reals nil)
	(posreal nonempty-type-eq-decl nil real_types nil)
	(delta_t formal-const-decl "posreal" Theorems nil)
	(tick type-eq-decl nil ClockTick nil)
	(pred type-eq-decl nil defined_types nil)
	(AND const-decl "[bool, bool -> bool]" booleans nil)
	(<= const-decl "bool" reals nil)
	(- const-decl "[numfield -> numfield]" number_fields nil)
	(OR const-decl "[bool, bool -> bool]" booleans nil)
	(/= const-decl "boolean" notequal nil)
	(^ const-decl "real" exponentiation nil)
	(< const-decl "bool" reals nil)
	(Int type-eq-decl nil TypeDefinitions nil)
	(UInt type-eq-decl nil TypeDefinitions nil)
	(f_qh_val def-decl "bool" Theorems nil)
	(f_ql_val def-decl "bool" Theorems nil)
	(f_q_val const-decl "bool" Theorems nil)
	(f_qh const-decl "bool" Theorems nil)
	(even_times_int_is_even application-judgement "even_int" integers
	nil)
	(mult_divides1 application-judgement "(divides(n))" divides nil)
	(mult_divides2 application-judgement "(divides(m))" divides nil)
	(f_ql const-decl "bool" Theorems nil)
	(real_gt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(int_minus_int_is_int application-judgement "int" integers nil)
	(real_ge_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(posreal_times_posreal_is_posreal application-judgement "posreal"
	real_types nil)
	(div const-decl "upto(n)" div_nat "ints/")
	(int_div const-decl "int" defined_operators nil)
	(rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
	(int_plus_int_is_int application-judgement "int" integers nil)
	(real_le_is_total_order name-judgement "(total_order?[real])"
	real_props nil)
	(next const-decl "tick" ClockTick nil)
	(pre const-decl "tick" ClockTick nil)
	(posint_exp application-judgement "posint" exponentiation nil)
	(posreal_plus_nnreal_is_posreal application-judgement "posreal"
	real_types nil)
	(real_minus_real_is_real application-judgement "real" reals nil)
	(nnreal_plus_posreal_is_posreal application-judgement "posreal"
	real_types nil)
	(real_lt_is_strict_total_order name-judgement
	"(strict_total_order?[real])" real_props nil)
	(f_q const-decl "bool" Theorems nil))
shostak)))


