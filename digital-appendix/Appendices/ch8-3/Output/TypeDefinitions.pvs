TypeDefinitions : theory

begin

	importing arith_bitwise
	importing Maybe
	importing FIFO

	Int(n : int): TYPE = {i:int | -(2^(n-1)) <= i AND i < 2^(n-1)}
	UInt(n : int): TYPE = {i:int | 0 <= i AND i < 2^n}
	Bit(n : int): TYPE = {i:int | 0 <= i AND i < 2^n}

	mkInt(n : int) : Int(n) = 0
	mkUInt(n : int) : UInt(n) = 0
	mkBit(n : int) : Bit(n) = 0

	q_depth : int = 12

	RegSize : type = Bit(32)

	mkRegSize : RegSize = 0
	SRL : type = Bit(16)

	mkSRL : SRL = 0
	Flag : type = Bit(1)

	mkFlag : Flag = 0
	COS : type = Bit(8)

	mkCOS : COS = 0
	QueueData : type = Bit(192)

	mkQueueData : QueueData = 0
	DataPkt : type = Bit(64)

	mkDataPkt : DataPkt = 0
	Mletter : type = Bit(2)

	mkMletter : Mletter = 0
	Status : type = Bit(4)

	mkStatus : Status = 0
	Offset : type = Bit(21)

	mkOffset : Offset = 0
	MsgSeg : type = Bit(4)

	mkMsgSeg : MsgSeg = 0
	MsgLen : type = Bit(4)

	mkMsgLen : MsgLen = 0
	DoorBell : type = Bit(16)

	mkDoorBell : DoorBell = 0
	WdPointer : type = Bit(1)

	mkWdPointer : WdPointer = 0
	WrSize : type = Bit(4)

	mkWrSize : WrSize = 0
	RdSize : type = Bit(4)

	mkRdSize : RdSize = 0
	Size : type = Bit(4)

	mkSize : Size = 0
	ByteCount : type = Bit(9)

	mkByteCount : ByteCount = 0
	ByteEn : type = Bit(8)

	mkByteEn : ByteEn = 0
	TT : type = Bit(2)

	mkTT : TT = 0
	Prio : type = Bit(2)

	mkPrio : Prio = 0
	SourceId : type = Bit(32)

	mkSourceId : SourceId = 0
	DestId : type = Bit(32)

	mkDestId : DestId = 0
	TranId : type = Bit(8)

	mkTranId : TranId = 0
	Tpye : type = Bit(4)

	mkTpye : Tpye = 0
	Data : type = Bit(64)

	mkData : Data = 0
	Addr : type = Bit(50)

	mkAddr : Addr = 0

	

	RxIncomingPacket : type = 
	 [# rx_sof : bool
	  , rx_eof : bool
	  , rx_vld : bool
	  , rx_data : DataPkt
	  , rx_rem : Bit(4)
	  , rx_crf : bool
	 #] 

	MaintenanceRespIfcData : type = 
	 [# mresp_tt : TT
	  , mresp_data : Data
	  , mresp_crf : bool
	  , mresp_prio : Prio
	  , mresp_ftype : Tpye
	  , mresp_ttype : Tpye
	  , mresp_dest_id : DestId
	  , mresp_hop_count : Bit(8)
	  , mresp_tid : TranId
	  , mresp_local : bool
	  , mresp_status : Status
	 #] 

	MaintenanceRespIfcCntrl : type = 
	 [# mresp_sof : bool
	  , mresp_eof : bool
	  , mresp_vld : bool
	 #] 

	MaintenanceRespIfcPkt : type = 
	 [# mrespcntrl : MaintenanceRespIfcCntrl
	  , mrespdata : MaintenanceRespIfcData
	 #] 

	MaintenanceReqIfcData : type = 
	 [# mreq_tt : TT
	  , mreq_data : Data
	  , mreq_crf : bool
	  , mreq_prio : Prio
	  , mreq_ftype : Tpye
	  , mreq_ttype : Tpye
	  , mreq_dest_id : DestId
	  , mreq_source_id : SourceId
	  , mreq_tid : TranId
	  , mreq_offset : Offset
	  , mreq_byte_en : ByteEn
	  , mreq_byte_count : ByteCount
	  , mreq_local : bool
	 #] 

	MaintenanceReqIfcCntrl : type = 
	 [# mreq_sof : bool
	  , mreq_eof : bool
	  , mreq_vld : bool
	 #] 

	MaintenanceReqIfcPkt : type = 
	 [# mreqcntrl : MaintenanceReqIfcCntrl
	  , mreqdata : MaintenanceReqIfcData
	 #] 

	TargetRespIfcMsg : type = 
	 [# tresp_msg_seg : MsgSeg
	  , tresp_mbox : Bit(2)
	  , tresp_letter : Mletter
	 #] 

	TargetRespIfcData : type = 
	 [# tresp_tt : TT
	  , tresp_data : Data
	  , tresp_crf : bool
	  , tresp_prio : Prio
	  , tresp_ftype : Tpye
	  , tresp_dest_id : DestId
	  , tresp_status : Status
	  , tresp_tid : TranId
	  , tresp_ttype : Tpye
	  , tresp_no_data : bool
	 #] 

	TargetRespIfcCntrl : type = 
	 [# tresp_sof : bool
	  , tresp_eof : bool
	  , tresp_vld : bool
	  , tresp_dsc : bool
	 #] 

	TargetRespIfcPkt : type = 
	 [# trespcntrl : TargetRespIfcCntrl
	  , trespdata : TargetRespIfcData
	  , trespmsg : TargetRespIfcMsg
	 #] 

	TargetReqIfcMsg : type = 
	 [# treq_db_info : DoorBell
	  , treq_msg_len : MsgLen
	  , treq_msg_seg : MsgSeg
	  , treq_mbox : Bit(6)
	  , treq_letter : Mletter
	 #] 

	TargetReqIfcData : type = 
	 [# treq_tt : TT
	  , treq_data : Data
	  , treq_crf : bool
	  , treq_prio : Prio
	  , treq_ftype : Tpye
	  , treq_destid : DestId
	  , treq_sourceid : SourceId
	  , treq_tid : TranId
	  , treq_ttype : Tpye
	  , treq_addr : Addr
	  , treq_byte_count : ByteCount
	  , treq_byte_en : ByteEn
	 #] 

	TargetReqIfcCntrl : type = 
	 [# treq_sof : bool
	  , treq_eof : bool
	  , treq_vld : bool
	 #] 

	TargetReqIfcPkt : type = 
	 [# treqcntrl : TargetReqIfcCntrl
	  , treqdata : TargetReqIfcData
	  , treqmsg : TargetReqIfcMsg
	 #] 

	InitRespIfcMsg : type = 
	 [# iresp_msg_seg : MsgSeg
	  , iresp_mbox : Bit(2)
	  , iresp_letter : Mletter
	 #] 

	InitRespIfcData : type = 
	 [# iresp_tt : TT
	  , iresp_data : Data
	  , iresp_crf : bool
	  , iresp_prio : Prio
	  , iresp_ftype : Tpye
	  , iresp_ttype : Tpye
	  , iresp_destid : DestId
	  , iresp_sourceid : SourceId
	  , iresp_status : Status
	  , iresp_tid : TranId
	  , iresp_local : bool
	 #] 

	InitRespIfcCntrl : type = 
	 [# iresp_sof : bool
	  , iresp_eof : bool
	  , iresp_vld : bool
	 #] 

	InitiatorRespIfcPkt : type = 
	 [# irespcntrl : InitRespIfcCntrl
	  , irespdata : InitRespIfcData
	  , irespmsg : InitRespIfcMsg
	 #] 

	InitReqIfcMsg : type = 
	 [# ireq_db_info : DoorBell
	  , ireq_msg_len : MsgLen
	  , ireq_msg_seg : MsgSeg
	  , ireq_mbox : Bit(6)
	  , ireq_letter : Mletter
	 #] 

	InitReqIfcData : type = 
	 [# ireq_tt : TT
	  , ireq_data : Data
	  , ireq_crf : bool
	  , ireq_prio : Prio
	  , ireq_ftype : Tpye
	  , ireq_destid : DestId
	  , ireq_addr : Addr
	  , ireq_hopcount : Bit(8)
	  , ireq_tid : TranId
	  , ireq_ttype : Tpye
	  , ireq_byte_count : ByteCount
	  , ireq_byte_en : ByteEn
	  , ireq_local : bool
	 #] 

	InitReqIfcCntrl : type = 
	 [# ireq_sof : bool
	  , ireq_eof : bool
	  , ireq_vld : bool
	  , ireq_dsc : bool
	 #] 

	InitiatorReqIfcPkt : type = 
	 [# ireqcntrl : InitReqIfcCntrl
	  , ireqdata : InitReqIfcData
	  , ireqmsg : InitReqIfcMsg
	 #] 

	Decode_ByteCount : type = 
	 [# bytecount_dec : ByteCount
	  , byteen_dec : ByteEn
	 #] 

	mkRxIncomingPacket : RxIncomingPacket
	= (# rx_sof := False
         , rx_eof := False
         , rx_vld := False
         , rx_data := 0
         , rx_rem := 0
         , rx_crf := False
	#)

	mkMaintenanceRespIfcData : MaintenanceRespIfcData
	= (# mresp_tt := 0
         , mresp_data := 0
         , mresp_crf := False
         , mresp_prio := 0
         , mresp_ftype := 0
         , mresp_ttype := 0
         , mresp_dest_id := 0
         , mresp_hop_count := 0
         , mresp_tid := 0
         , mresp_local := False
         , mresp_status := 0
	#)

	mkMaintenanceRespIfcCntrl : MaintenanceRespIfcCntrl
	= (# mresp_sof := False
         , mresp_eof := False
         , mresp_vld := False
	#)

	mkMaintenanceRespIfcPkt : MaintenanceRespIfcPkt
	= (# mrespcntrl := mkMaintenanceRespIfcCntrl
         , mrespdata := mkMaintenanceRespIfcData
	#)

	mkMaintenanceReqIfcData : MaintenanceReqIfcData
	= (# mreq_tt := 0
         , mreq_data := 0
         , mreq_crf := False
         , mreq_prio := 0
         , mreq_ftype := 0
         , mreq_ttype := 0
         , mreq_dest_id := 0
         , mreq_source_id := 0
         , mreq_tid := 0
         , mreq_offset := 0
         , mreq_byte_en := 0
         , mreq_byte_count := 0
         , mreq_local := False
	#)

	mkMaintenanceReqIfcCntrl : MaintenanceReqIfcCntrl
	= (# mreq_sof := False
         , mreq_eof := False
         , mreq_vld := False
	#)

	mkMaintenanceReqIfcPkt : MaintenanceReqIfcPkt
	= (# mreqcntrl := mkMaintenanceReqIfcCntrl
         , mreqdata := mkMaintenanceReqIfcData
	#)

	mkTargetRespIfcMsg : TargetRespIfcMsg
	= (# tresp_msg_seg := 0
         , tresp_mbox := 0
         , tresp_letter := 0
	#)

	mkTargetRespIfcData : TargetRespIfcData
	= (# tresp_tt := 0
         , tresp_data := 0
         , tresp_crf := False
         , tresp_prio := 0
         , tresp_ftype := 0
         , tresp_dest_id := 0
         , tresp_status := 0
         , tresp_tid := 0
         , tresp_ttype := 0
         , tresp_no_data := True
	#)

	mkTargetRespIfcCntrl : TargetRespIfcCntrl
	= (# tresp_sof := False
         , tresp_eof := False
         , tresp_vld := False
         , tresp_dsc := False
	#)

	mkTargetRespIfcPkt : TargetRespIfcPkt
	= (# trespcntrl := mkTargetRespIfcCntrl
         , trespdata := mkTargetRespIfcData
         , trespmsg := mkTargetRespIfcMsg
	#)

	mkTargetReqIfcMsg : TargetReqIfcMsg
	= (# treq_db_info := 0
         , treq_msg_len := 0
         , treq_msg_seg := 0
         , treq_mbox := 0
         , treq_letter := 0
	#)

	mkTargetReqIfcData : TargetReqIfcData
	= (# treq_tt := 0
         , treq_data := 0
         , treq_crf := False
         , treq_prio := 0
         , treq_ftype := 0
         , treq_destid := 0
         , treq_sourceid := 0
         , treq_tid := 0
         , treq_ttype := 0
         , treq_addr := 0
         , treq_byte_count := 0
         , treq_byte_en := 0
	#)

	mkTargetReqIfcCntrl : TargetReqIfcCntrl
	= (# treq_sof := False
         , treq_eof := False
         , treq_vld := False
	#)

	mkTargetReqIfcPkt : TargetReqIfcPkt
	= (# treqcntrl := mkTargetReqIfcCntrl
         , treqdata := mkTargetReqIfcData
         , treqmsg := mkTargetReqIfcMsg
	#)

	mkInitRespIfcMsg : InitRespIfcMsg
	= (# iresp_msg_seg := 0
         , iresp_mbox := 0
         , iresp_letter := 0
	#)

	mkInitRespIfcData : InitRespIfcData
	= (# iresp_tt := 0
         , iresp_data := 0
         , iresp_crf := False
         , iresp_prio := 0
         , iresp_ftype := 0
         , iresp_ttype := 0
         , iresp_destid := 0
         , iresp_sourceid := 0
         , iresp_status := 0
         , iresp_tid := 0
         , iresp_local := False
	#)

	mkInitRespIfcCntrl : InitRespIfcCntrl
	= (# iresp_sof := False
         , iresp_eof := False
         , iresp_vld := False
	#)

	mkInitiatorRespIfcPkt : InitiatorRespIfcPkt
	= (# irespcntrl := mkInitRespIfcCntrl
         , irespdata := mkInitRespIfcData
         , irespmsg := mkInitRespIfcMsg
	#)

	mkInitReqIfcMsg : InitReqIfcMsg
	= (# ireq_db_info := 0
         , ireq_msg_len := 0
         , ireq_msg_seg := 0
         , ireq_mbox := 0
         , ireq_letter := 0
	#)

	mkInitReqIfcData : InitReqIfcData
	= (# ireq_tt := 0
         , ireq_data := 0
         , ireq_crf := False
         , ireq_prio := 0
         , ireq_ftype := 0
         , ireq_destid := 0
         , ireq_addr := 0
         , ireq_hopcount := 0
         , ireq_tid := 0
         , ireq_ttype := 0
         , ireq_byte_count := 0
         , ireq_byte_en := 0
         , ireq_local := False
	#)

	mkInitReqIfcCntrl : InitReqIfcCntrl
	= (# ireq_sof := False
         , ireq_eof := False
         , ireq_vld := False
         , ireq_dsc := False
	#)

	mkInitiatorReqIfcPkt : InitiatorReqIfcPkt
	= (# ireqcntrl := mkInitReqIfcCntrl
         , ireqdata := mkInitReqIfcData
         , ireqmsg := mkInitReqIfcMsg
	#)

	mkDecode_ByteCount : Decode_ByteCount
	= (# bytecount_dec := 0
         , byteen_dec := 0
	#)

	fn_ByteEnDataGeneration (datain: Data, byte_en: ByteEn, data_0: Bit(6416)) : Bit(64)
		= if ( byte_en = 255 )
			  then datain
			  else if ( byte_en = 127 )
			  then ( bitConcat (data_0, (bitSelect(datain, ( ( 64 - ( div((64 ), (8)) ) ) - 1 ), 0)), 55))
			  else if ( byte_en = 254 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( div((64 ), (8)) ))), data_0, 6416))
			  else if ( byte_en = 63 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( 64 - ( div((64 ), (4)) ) ) - 1 ), 0)), 47)), 6463))
			  else if ( byte_en = 252 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( div((64 ), (4)) ))), ( bitConcat (data_0, data_0, 6416)), 12832))
			  else if ( byte_en = 15 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( div((64 ), (2)) ) - 1 ), 0)), 31)), 6447)), 12863)), 19279))
			  else if ( byte_en = 240 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( div((64 ), (2)) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664))
			  else if ( byte_en = 31 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( 5 * ( div((64 ), (8)) ) ) - 1 ), 0)), 39)), 6455)), 12871))
			  else if ( byte_en = 3 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( 2 * ( div((64 ), (8)) ) ) - 1 ), 0)), 15)), 6431)), 12847)), 19263)), 25679)), 32095))
			  else if ( byte_en = 7 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( 3 * ( div((64 ), (8)) ) ) - 1 ), 0)), 23)), 6439)), 12855)), 19271)), 25687))
			  else if ( byte_en = 12 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 4 * ( div((64 ), (8)) ) ) - 1 ), ( 2 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, data_0, 6416)), 12832)), 12847)), 19263)), 25679)), 32095))
			  else if ( byte_en = 248 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( 3 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248))
			  else if ( byte_en = 48 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 6 * ( div((64 ), (8)) ) ) - 1 ), ( 4 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 25679)), 32095))
			  else if ( byte_en = 224 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( 5 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 32080))
			  else if ( byte_en = 192 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( 6 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 32080)), 38496))
			  else if ( byte_en = 1 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, (bitSelect(datain, ( ( div((64 ), (8)) ) - 1 ), 0)), 7)), 6423)), 12839)), 19255)), 25671)), 32087)), 38503))
			  else if ( byte_en = 2 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 2 * ( div((64 ), (8)) ) ) - 1 ), ( div((64 ), (8)) ))), data_0, 6416)), 6423)), 12839)), 19255)), 25671)), 32087)), 38503))
			  else if ( byte_en = 4 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 3 * ( div((64 ), (8)) ) ) - 1 ), ( 2 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, data_0, 6416)), 12832)), 12839)), 19255)), 25671)), 32087)), 38503))
			  else if ( byte_en = 8 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 4 * ( div((64 ), (8)) ) ) - 1 ), ( 3 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 19255)), 25671)), 32087)), 38503))
			  else if ( byte_en = 16 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 5 * ( div((64 ), (8)) ) ) - 1 ), ( 4 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 25671)), 32087)), 38503))
			  else if ( byte_en = 32 )
			  then ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 6 * ( div((64 ), (8)) ) ) - 1 ), ( 5 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 32080)), 32087)), 38503))
			  else if ( byte_en = 64 )
			  then ( bitConcat (data_0, ( bitConcat ((bitSelect(datain, ( ( 7 * ( div((64 ), (8)) ) ) - 1 ), ( 6 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 32080)), 38496)), 38503))
			  else if ( byte_en = 128 )
			  then ( bitConcat ((bitSelect(datain, ( 64 - 1 ), ( 7 * ( div((64 ), (8)) ) ))), ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, ( bitConcat (data_0, data_0, 6416)), 12832)), 19248)), 25664)), 32080)), 38496)), 44912))
			  else datain
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif

	fn_ByteCountDecoder (wr_Read: bool, wr_Size: Size, wr_WdPtr: Bit(1)) : Decode_ByteCount
		= COND
			  wr_Size = 0 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 8
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 128
			  ]
			endif
			, wr_Size = 1 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 4
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 64
			  ]
			endif
			, wr_Size = 2 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 2
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 32
			  ]
			endif
			, wr_Size = 3 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 1
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 1
				, byteen_dec := 16
			  ]
			endif
			, wr_Size = 4 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 2
				, byteen_dec := 12
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 2
				, byteen_dec := 192
			  ]
			endif
			, wr_Size = 5 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 3
				, byteen_dec := 7
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 3
				, byteen_dec := 224
			  ]
			endif
			, wr_Size = 6 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 2
				, byteen_dec := 3
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 2
				, byteen_dec := 48
			  ]
			endif
			, wr_Size = 7 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 5
				, byteen_dec := 31
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 5
				, byteen_dec := 248
			  ]
			endif
			, wr_Size = 8 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 4
				, byteen_dec := 15
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 4
				, byteen_dec := 240
			  ]
			endif
			, wr_Size = 9 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 6
				, byteen_dec := 63
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 6
				, byteen_dec := 252
			  ]
			endif
			, wr_Size = 10 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 7
				, byteen_dec := 127
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 7
				, byteen_dec := 254
			  ]
			endif
			, wr_Size = 11 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 16
				, byteen_dec := 255
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 8
				, byteen_dec := 255
			  ]
			endif
			, wr_Size = 12 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 64
				, byteen_dec := 255
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 32
				, byteen_dec := 255
			  ]
			endif
			, wr_Size = 13 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 128
				, byteen_dec := 255
			  ]
			  else if ( wr_Read = True )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 96
				, byteen_dec := 255
			  ]
			  else mkDecode_ByteCount
			endif
			endif
			, wr_Size = 14 -> if ( wr_Read = True )
			  then if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 192
				, byteen_dec := 255
			  ]
			  else LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 160
				, byteen_dec := 255
			  ]
			endif
			  else mkDecode_ByteCount
			endif
			, wr_Size = 15 -> if ( wr_WdPtr = 1 )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 256
				, byteen_dec := 255
			  ]
			  else if ( wr_Read = True )
			  then LET x : Decode_ByteCount = mkDecode_ByteCount
			  IN x WITH [ bytecount_dec := 224
				, byteen_dec := 255
			  ]
			  else mkDecode_ByteCount
			endif
			endif
		ENDCOND

	
end TypeDefinitions