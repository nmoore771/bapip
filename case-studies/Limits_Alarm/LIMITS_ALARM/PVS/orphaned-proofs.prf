("LIMITS_ALARM" Theorems LIMITS_ALARM_consistency_2 0 (LIMITS_ALARM_consistency_2-1 nil 3682350057 ("" (skolem!) (("" (inst + "LIMITS_ALARM_t_val(pre!1)") (("" (grind) nil nil)) nil)) nil) ((HYSTERESIS type-eq-decl nil State nil) (LIMITS_ALARM type-eq-decl nil State nil) (LIMITS_ALARM_t_val const-decl "LIMITS_ALARM" Transitions nil) (LIMITS_ALARM_t const-decl "bool" Transitions nil)) shostak))("LIMITS_ALARM" Theorems LIMITS_ALARM_consistency 0 (LIMITS_ALARM_consistency-1 nil 3682350003 ("" (skolem!) (("" (inst + "LIMITS_ALARM_t_set_Alarms_val(pre!1, x_nt!1, h_nt!1, l_nt!1, eps_nt!1)") (("" (grind) nil nil)) nil)) nil) ((HYSTERESIS type-eq-decl nil State nil) (LIMITS_ALARM type-eq-decl nil State nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (Int type-eq-decl nil TypeDefinitions nil) (LIMITS_ALARM_t_set_Alarms_val const-decl "LIMITS_ALARM" Transitions nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (LIMITS_ALARM_t_set_Alarms const-decl "bool" Transitions nil) (div const-decl "upto(n)" div_nat "ints/") (set_Inputs_gd const-decl "bool" Transitions nil) (posint_exp application-judgement "posint" exponentiation nil)) shostak))