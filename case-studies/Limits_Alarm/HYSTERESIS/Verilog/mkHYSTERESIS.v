//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Thu May 19 14:17:14 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// set_Inputs                     O     1
// RDY_set_Inputs                 O     1 const
// get_q                          O     1 reg
// RDY_get_q                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_Inputs_xin1                I    16
// set_Inputs_xin2                I    16
// set_Inputs_eps                 I    16
// EN_set_Inputs                  I     1
//
// Combinational paths from inputs to outputs:
//   (set_Inputs_xin1, set_Inputs_xin2, set_Inputs_eps) -> set_Inputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHYSTERESIS(CLK,
		    RST_N,

		    set_Inputs_xin1,
		    set_Inputs_xin2,
		    set_Inputs_eps,
		    EN_set_Inputs,
		    set_Inputs,
		    RDY_set_Inputs,

		    get_q,
		    RDY_get_q);
  input  CLK;
  input  RST_N;

  // actionvalue method set_Inputs
  input  [15 : 0] set_Inputs_xin1;
  input  [15 : 0] set_Inputs_xin2;
  input  [15 : 0] set_Inputs_eps;
  input  EN_set_Inputs;
  output set_Inputs;
  output RDY_set_Inputs;

  // value method get_q
  output get_q;
  output RDY_get_q;

  // signals for module outputs
  wire RDY_get_q, RDY_set_Inputs, get_q, set_Inputs;

  // register q
  reg q;
  wire q$D_IN, q$EN;

  // rule scheduling signals
  wire CAN_FIRE_set_Inputs, WILL_FIRE_set_Inputs;

  // remaining internal signals
  wire q_AND_set_Inputs_xin2_MINUS_set_Inputs_eps_SLE_ETC___d4;

  // actionvalue method set_Inputs
  assign set_Inputs =
	     q_AND_set_Inputs_xin2_MINUS_set_Inputs_eps_SLE_ETC___d4 ||
	     (set_Inputs_xin1 ^ 16'h8000) >
	     (set_Inputs_xin2 + set_Inputs_eps ^ 16'h8000) ;
  assign RDY_set_Inputs = 1'd1 ;
  assign CAN_FIRE_set_Inputs = 1'd1 ;
  assign WILL_FIRE_set_Inputs = EN_set_Inputs ;

  // value method get_q
  assign get_q = q ;
  assign RDY_get_q = 1'd1 ;

  // register q
  assign q$D_IN = set_Inputs ;
  assign q$EN = EN_set_Inputs ;

  // remaining internal signals
  assign q_AND_set_Inputs_xin2_MINUS_set_Inputs_eps_SLE_ETC___d4 =
	     q &&
	     (set_Inputs_xin2 - set_Inputs_eps ^ 16'h8000) <=
	     (set_Inputs_xin1 ^ 16'h8000) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        q <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (q$EN) q <= `BSV_ASSIGNMENT_DELAY q$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    q = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkHYSTERESIS

