Theorems[(IMPORTING Time) delta_t:posreal] : theory

begin

	importing Transitions
	importing ClockTick[delta_t]

	t: VAR tick

	s : VAR [tick -> SR_Latch]
	pre, post, SR_Latch_var : VAR SR_Latch
	i : VAR int
	s1_in, r_in : VAR [tick -> bool]
	s1_in_nt, r_in_nt : VAR bool
	s1, r, q : VAR [tick -> bool]

  SR_REQ(s1,r,q)(t): bool = 
      q(next(t)) =  
        LET prev = q(t) IN
         TABLE
          | s1(t)                | True  ||
          | NOT s1(t) & r(t)     | False ||    
          | NOT s1(t) & NOT r(t) | prev  ||
         ENDTABLE
	
% The following predicates are available from 'Transitions.pvs' and 'State.pvs'
%	mkSR_Latch : (pre)
%	SR_Latch_t_m_set_Inputs (pre, post, s1_in, r_in)
%	SR_Latch_t (pre, post)
%	SR_Latch_get_q (SR_Latch_var) : bool

        correctness : theorem
	SR_Latch_t_m_set_Inputs (s(t), s(next(t)), r(t), s1(t))
	and SR_REQ(r, s1, q)(t)
	and q(t) = SR_Latch_get_q (s(t))
	implies q(next(t)) = SR_Latch_get_q (s(next(t)))

	
%|- SR_Latch_t_m_set_Inputs_consistency : PROOF
%|- (then (skolem!)
%|-       (inst + "SR_Latch_t_m_set_Inputs_val (pre!1, s1_in_nt!1, r_in_nt!1)")
%|-       (grind))
%|- QED
		SR_Latch_t_m_set_Inputs_consistency : Theorem
		FORALL (pre, s1_in_nt, r_in_nt) : 
		EXISTS (post) : 
		SR_Latch_t_m_set_Inputs (pre, post, s1_in_nt, r_in_nt)

	
%|- SR_Latch_t_consistency : PROOF
%|- (then (skolem!)
%|-       (inst + "SR_Latch_t_val (pre!1)")
%|-       (grind))
%|- QED
		SR_Latch_t_consistency : Theorem 
		FORALL (pre) : 
		EXISTS (post) : 
		SR_Latch_t (pre, post)

	
end Theorems
