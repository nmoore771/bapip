Transitions : theory

begin

	importing State


	pre, post, Rising_edge_detector_var : VAR Rising_edge_detector
	clk_in : var bool


	Rising_edge_detector_get_q_gd (Rising_edge_detector_var) : bool
		 = True

	Rising_edge_detector_set_Inputs_gd (Rising_edge_detector_var) : bool
		 = True


	Rising_edge_detector_get_q (Rising_edge_detector_var) : bool
		 = Rising_edge_detector_var`q


	Rising_edge_detector_t_m_set_Inputs (pre, post, clk_in) : bool =
		  (post = pre with
		  [clk_prev := if (Rising_edge_detector_set_Inputs_gd(pre))
		    then (clk_in)
		    else (pre`clk_prev)
		  endif
		  , q := if (Rising_edge_detector_set_Inputs_gd(pre))
		    then (if ( (NOT pre`clk_prev) AND clk_in )
			  then True
			  else False
			endif)
		    else (pre`q)
		  endif
		  ]
		)

	Rising_edge_detector_t (pre, post) : bool =
		  (post = pre with
		  [clk_prev := (pre`clk_prev)
		  , q := (pre`q)
		  ]
		)


	Rising_edge_detector_t_m_set_Inputs_val (pre, clk_in) : Rising_edge_detector =
		  (pre with
		  [clk_prev := if (Rising_edge_detector_set_Inputs_gd(pre))
		    then (clk_in)
		    else (pre`clk_prev)
		  endif
		  , q := if (Rising_edge_detector_set_Inputs_gd(pre))
		    then (if ( (NOT pre`clk_prev) AND clk_in )
			  then True
			  else False
			endif)
		    else (pre`q)
		  endif
		  ]
		)

	Rising_edge_detector_t_val (pre) : Rising_edge_detector =
		  (pre with
		  [clk_prev := (pre`clk_prev)
		  , q := (pre`q)
		  ]
		)


	
end Transitions
