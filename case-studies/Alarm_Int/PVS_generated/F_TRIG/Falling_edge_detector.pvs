Theorems[(IMPORTING Time) delta_t:posreal] : theory

begin

	importing Transitions
	importing ClockTick[delta_t]

	t: VAR tick

	s : VAR [tick -> Falling_edge_detector]
	pre, post, Falling_edge_detector_var : VAR Falling_edge_detector
	i : VAR int
	clk_in, clk, q : VAR [tick -> bool]
	clk_in_nt : VAR bool

	

  Falling_REQ(clk,q)(t): bool = 
    q(next(t)) = 
      LET prev = clk(pre(t)) IN
        TABLE
         | prev & NOT clk(t)  | True  ||
         | NOT prev OR clk(t) | False ||
        ENDTABLE

% The following predicates are available from 'Transitions.pvs' and 'State.pvs'
%	mkFalling_edge_detector : (pre)
%	Falling_edge_detector_t_m_set_Inputs (pre, post, clk_in)
%	Falling_edge_detector_t (pre, post)
%	Falling_edge_detector_get_q (Falling_edge_detector_var) : bool

	correctness : Theorem
	  s(t)`clk_prev = clk(pre(t))
	  and Falling_edge_detector_t_m_set_Inputs (s(t), s(next(t)), clk(t))
	  and Falling_REQ(clk,q)(t)
  	    implies Falling_edge_detector_get_q(s(next(t))) = q(next(t))
	
%|- Falling_edge_detector_t_m_set_Inputs_consistency : PROOF
%|- (then (skolem!)
%|-       (inst + "Falling_edge_detector_t_m_set_Inputs_val (pre!1, clk_in_nt!1)")
%|-       (grind))
%|- QED
		Falling_edge_detector_t_m_set_Inputs_consistency : Theorem
		FORALL (pre, clk_in_nt) : 
		EXISTS (post) : 
		Falling_edge_detector_t_m_set_Inputs (pre, post, clk_in_nt)

	
%|- Falling_edge_detector_t_consistency : PROOF
%|- (then (skolem!)
%|-       (inst + "Falling_edge_detector_t_val (pre!1)")
%|-       (grind))
%|- QED
		Falling_edge_detector_t_consistency : Theorem 
		FORALL (pre) : 
		EXISTS (post) : 
		Falling_edge_detector_t (pre, post)

	
end Theorems
