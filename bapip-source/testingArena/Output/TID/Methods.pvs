Methods : theory

begin

	importing State


	outputs_MaintainReqIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_RxPktFTypeAnalyse) : Maybe[MaintenanceReqIfcPkt, mkMaintenanceReqIfcPkt] = IF (index = 0) 
	  THEN LET wr_MreqIfcPkt : Maybe[MaintenanceReqIfcPkt, mkMaintenanceReqIfcPkt] = Nothing[MaintenanceReqIfcPkt,mkMaintenanceReqIfcPkt]
		 IN wr_MreqIfcPkt
		ELSE Nothing[MaintenanceReqIfcPkt,mkMaintenanceReqIfcPkt]
		ENDIF 

	outputs_TargetReqIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_RxPktFTypeAnalyse) : Maybe[TargetReqIfcPkt, mkTargetReqIfcPkt] = IF (index = 0) 
	  THEN LET wr_TgtReqIfcPkt : Maybe[TargetReqIfcPkt, mkTargetReqIfcPkt] = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN Just[TargetReqIfcPkt,LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]]( x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ])
		 IN wr_TgtReqIfcPkt
		ELSE Nothing[TargetReqIfcPkt,mkTargetReqIfcPkt]
		ENDIF 

	outputs_InitRespIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_RxPktFTypeAnalyse) : Maybe[InitiatorRespIfcPkt, mkInitiatorRespIfcPkt] = IF (index = 0) 
	  THEN LET wr_InitRespIfcPkt : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN Just[InitiatorRespIfcPkt,LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]]( x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ])
		 IN wr_InitRespIfcPkt
		ELSE Nothing[InitiatorRespIfcPkt,mkInitiatorRespIfcPkt]
		ENDIF 

	outputs_MaxPktCount_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InComingPkt_Separation) : Bit(4) = IF (index = 0) 
	  THEN if ( mod`rg_LastPkt = True )
			  then mod`rg_PktCount
			  else 0
			endif
		ELSE 0
		ENDIF 

	outputs_LastPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InComingPkt_Separation) : bool = IF (index = 0) 
	  THEN mod`rg_LastPkt
		ELSE False
		ENDIF 

	outputs_PktCount_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InComingPkt_Separation) : Bit(4) = IF (index = 0) 
	  THEN mod`rg_PktCount
		ELSE 0
		ENDIF 

	outputs_DataPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InComingPkt_Separation) : DataPkt = IF (index = 0) 
	  THEN mod`rg_DataPkt
		ELSE 0
		ENDIF 

	outputs_HeaderPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InComingPkt_Separation) : DataPkt = IF (index = 0) 
	  THEN mod`rg_HeaderPkt
		ELSE 0
		ENDIF 

	outputs_MaxPktCount_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Bit(4) = IF (index = 0) 
	  THEN outputs_MaxPktCount_(0, pre, pre`rio_ModRxPktParsing`pkt_Separation)
		ELSE 0
		ENDIF 

	outputs_RxPrioField_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Prio = IF (index = 0) 
	  THEN mod`rg_PrioReceived
		ELSE 0
		ENDIF 

	outputs_RxSourceId_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : SourceId = IF (index = 0) 
	  THEN mod`rg_SrcIDReceived
		ELSE 0
		ENDIF 

	outputs_RxDestId_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : DestId = IF (index = 0) 
	  THEN mod`rg_DestIDReceived
		ELSE 0
		ENDIF 

	outputs_TTReceived_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : TT = IF (index = 0) 
	  THEN mod`rg_TTReceived
		ELSE 0
		ENDIF 

	outputs_ReceivedPkts_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : ReceivedPktsInfo = IF (index = 0) 
	  THEN LET x : ReceivedPktsInfo = mkReceivedPktsInfo
			  IN x WITH [ headerpkt := mod`rg_HeaderPkt
				, datapkt := mod`rg_DataPkt
				, pktcount := mod`rg_PktCount
				, lastpkt := mod`rg_LastPkt
			  ]
		ELSE LET x : ReceivedPktsInfo = mkReceivedPktsInfo
			  IN x WITH [ headerpkt := 0
				, datapkt := 0
				, pktcount := 0
				, lastpkt := False
			  ]
		ENDIF 

	outputs_RxFtype13ResponseData_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[Data, mkData] = IF (index = 0) 
	  THEN mod`rg_RespClassData
		ELSE Nothing[Data,mkData]
		ENDIF 

	outputs_RxFtype13ResponseClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType13_ResponseClass, mkFType13_ResponseClass] = IF (index = 0) 
	  THEN mod`rg_Ftype13_ResponseClass
		ELSE Nothing[FType13_ResponseClass,mkFType13_ResponseClass]
		ENDIF 

	outputs_RxFtype11Data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[Ftype11MessageData, mkFtype11MessageData] = IF (index = 0) 
	  THEN mod`rg_Ftype11_MessageData
		ELSE Nothing[Ftype11MessageData,mkFtype11MessageData]
		ENDIF 

	outputs_RxFtype11MsgHeader_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType11_MESSAGEClass, mkFType11_MESSAGEClass] = IF (index = 0) 
	  THEN mod`rg_Ftype11_MessageHeader
		ELSE Nothing[FType11_MESSAGEClass,mkFType11_MESSAGEClass]
		ENDIF 

	outputs_RxFtype10DoorBellClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType10_DOORBELLClass, mkFType10_DOORBELLClass] = IF (index = 0) 
	  THEN mod`rg_Ftype10_DoorBellClass
		ELSE Nothing[FType10_DOORBELLClass,mkFType10_DOORBELLClass]
		ENDIF 

	outputs_RxFtype8MaintainData_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[Data, mkData] = IF (index = 0) 
	  THEN IF ( mod`rg_MaintenanceWrData`valid ) 
			  THEN LET ftype8MaintainData : Data = mod`rg_MaintenanceWrData`value
			IN Just[Data,mkData](ftype8MaintainData)
			  ELSE Nothing[Data,mkData]
			ENDIF
		ELSE Nothing[Data,mkData]
		ENDIF 

	outputs_RxFtype8MainReqClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType8_MaintenanceClass, mkFType8_MaintenanceClass] = IF (index = 0) 
	  THEN IF ( mod`rg_Ftype8_MaintenanceClass`valid ) 
			  THEN LET ftype8MaintenanceClass : FType8_MaintenanceClass = mod`rg_Ftype8_MaintenanceClass`value
			IN Just[FType8_MaintenanceClass,mkFType8_MaintenanceClass](ftype8MaintenanceClass)
			  ELSE Nothing[FType8_MaintenanceClass,mkFType8_MaintenanceClass]
			ENDIF
		ELSE Nothing[FType8_MaintenanceClass,mkFType8_MaintenanceClass]
		ENDIF 

	outputs_RxFtype6StreamData_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[Ftype6StreamData, mkFtype6StreamData] = IF (index = 0) 
	  THEN mod`rg_StreamData
		ELSE Nothing[Ftype6StreamData,mkFtype6StreamData]
		ENDIF 

	outputs_RxFtype6StreamClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType6_StreamWrClass, mkFType6_StreamWrClass] = IF (index = 0) 
	  THEN mod`rg_Ftype6_StreamWrClass
		ELSE Nothing[FType6_StreamWrClass,mkFType6_StreamWrClass]
		ENDIF 

	outputs_RxFtype5WriteClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType5_WriteClass, mkFType5_WriteClass] = IF (index = 0) 
	  THEN mod`rg_Ftype5_WrClass
		ELSE Nothing[FType5_WriteClass,mkFType5_WriteClass]
		ENDIF 

	outputs_RxFtype2ReqClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : Maybe[FType2_RequestClass, mkFType2_RequestClass] = IF (index = 0) 
	  THEN mod`rg_Ftype2_ReqClass
		ELSE Nothing[FType2_RequestClass,mkFType2_RequestClass]
		ENDIF 

	outputs_RxRdy_From_Dest_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN LET wr_RxReady_In : bool = False
		 IN wr_RxReady_In
		ELSE False
		ENDIF 

	pkgen_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN False
		ELSE False
		ENDIF 

	pkgen_tx_rem_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : Bit(4) = IF (index = 0) 
	  THEN LET wr_PktGenTranmitIfcFirst : Transmit_Pkt = LET x : Transmit_Pkt = mkTransmit_Pkt
			  IN x WITH [ sof := False
				, eof := False
				, vld := False
				, data := 0
				, txrem := 0
				, crf := False
			  ]
		 IN wr_PktGenTranmitIfcFirst`txrem
		ELSE 0
		ENDIF 

	pkgen_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : DataPkt = IF (index = 0) 
	  THEN LET wr_PktGenTranmitIfcFirst : Transmit_Pkt = LET x : Transmit_Pkt = mkTransmit_Pkt
			  IN x WITH [ sof := False
				, eof := False
				, vld := False
				, data := 0
				, txrem := 0
				, crf := False
			  ]
		 IN wr_PktGenTranmitIfcFirst`data
		ELSE 0
		ENDIF 

	pkgen_dsc_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN (NOT mod`pkgen_DSC_n)
		ELSE False
		ENDIF 

	pkgen_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN LET wr_PktGenTranmitIfcFirst : Transmit_Pkt = LET x : Transmit_Pkt = mkTransmit_Pkt
			  IN x WITH [ sof := False
				, eof := False
				, vld := False
				, data := 0
				, txrem := 0
				, crf := False
			  ]
		 IN (NOT wr_PktGenTranmitIfcFirst`vld)
		ELSE False
		ENDIF 

	pkgen_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN LET wr_PktGenTranmitIfcFirst : Transmit_Pkt = LET x : Transmit_Pkt = mkTransmit_Pkt
			  IN x WITH [ sof := False
				, eof := False
				, vld := False
				, data := 0
				, txrem := 0
				, crf := False
			  ]
		 IN (NOT wr_PktGenTranmitIfcFirst`eof)
		ELSE False
		ENDIF 

	pkgen_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPkt_Generation) : bool = IF (index = 0) 
	  THEN LET wr_PktGenTranmitIfcFirst : Transmit_Pkt = LET x : Transmit_Pkt = mkTransmit_Pkt
			  IN x WITH [ sof := False
				, eof := False
				, vld := False
				, data := 0
				, txrem := 0
				, crf := False
			  ]
		 IN (NOT wr_PktGenTranmitIfcFirst`sof)
		ELSE False
		ENDIF 

	outputs_WdPointer_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitEncoder_WdPtr_Size) : WdPointer = IF (index = 0) 
	  THEN LET wr_WdPointer : WdPointer = 0
		 IN wr_WdPointer
		ELSE 0
		ENDIF 

	outputs_Size_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitEncoder_WdPtr_Size) : Size = IF (index = 0) 
	  THEN LET wr_Size : Size = 0
		 IN wr_Size
		ELSE 0
		ENDIF 

	outputs_RxRdy_From_Concat_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : bool = IF (index = 0) 
	  THEN LET wr_RxReadyIn : bool = outputs_RxRdy_From_Dest_(0, pre, pre`rio_ModInsIOPktGeneration)
		 IN wr_RxReadyIn
		ELSE False
		ENDIF 

	outputs_InitReqDataCount_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : InitReqDataInput = IF (index = 0) 
	  THEN LET x : InitReqDataInput = mkInitReqDataInput
			  IN x WITH [ lastdata := mod`rg_LastData
				, datacount := mod`rg_DataCount
			  ]
		ELSE LET x : InitReqDataInput = mkInitReqDataInput
			  IN x WITH [ lastdata := False
				, datacount := 0
			  ]
		ENDIF 

	outputs_Ftype9_DataStreamingPacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType9_DataStreamingClass = IF (index = 0) 
	  THEN mkFType9_DataStreamingClass
		ELSE LET x : FType9_DataStreamingClass = mkFType9_DataStreamingClass
			  IN x WITH [ ftype := 0
				, cos := 0
				, start := 0
				, ends := 0
				, rsv := 0
				, xheader := 0
				, odd := 0
				, pad := 0
				, srl := 0
				, data := 0
			  ]
		ENDIF 

	outputs_Ftype8_IOMaintenancePacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType8_MaintenanceClass = IF (index = 0) 
	  THEN LET wr_Ftype8_MaintenanceResp : FType8_MaintenanceClass = LET x : FType8_MaintenanceClass = mkFType8_MaintenanceClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, size := 0
				, tranID := 0
				, config_offset := 0
				, wdptr := 0
				, data := Nothing[Data,mkData]
			  ]
		 IN wr_Ftype8_MaintenanceResp
		ELSE LET x : FType8_MaintenanceClass = mkFType8_MaintenanceClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, size := 0
				, tranID := 0
				, config_offset := 0
				, wdptr := 0
				, data := Nothing[Data,mkData]
			  ]
		ENDIF 

	outputs_Ftype13_IORespPacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType13_ResponseClass = IF (index = 0) 
	  THEN LET wr_Ftype13_Response : FType13_ResponseClass = LET x : FType13_ResponseClass = mkFType13_ResponseClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, status := 0
				, tgtTID := 0
				, data := Nothing[Data,mkData]
			  ]
		 IN wr_Ftype13_Response
		ELSE LET x : FType13_ResponseClass = mkFType13_ResponseClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, status := 0
				, tgtTID := 0
				, data := Nothing[Data,mkData]
			  ]
		ENDIF 

	outputs_Ftype11_MESSAGEClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType11_MESSAGEClass = IF (index = 0) 
	  THEN LET wr_Ftype11_MESSAGEPkt : FType11_MESSAGEClass = LET x : FType11_MESSAGEClass = mkFType11_MESSAGEClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, msglen := 0
				, ssize := 0
				, srcTID := 0
				, letter := 0
				, mbox := 0
				, msgseg := 0
			  ]
		 IN wr_Ftype11_MESSAGEPkt
		ELSE LET x : FType11_MESSAGEClass = mkFType11_MESSAGEClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, msglen := 0
				, ssize := 0
				, srcTID := 0
				, letter := 0
				, mbox := 0
				, msgseg := 0
			  ]
		ENDIF 

	outputs_Ftype10_MgDOORBELLClass_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType10_DOORBELLClass = IF (index = 0) 
	  THEN LET wr_Ftype10_DOORBELLPkt : FType10_DOORBELLClass = LET x : FType10_DOORBELLClass = mkFType10_DOORBELLClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, srcTID := 0
				, info_msb := 0
				, info_lsb := 0
			  ]
		 IN wr_Ftype10_DOORBELLPkt
		ELSE LET x : FType10_DOORBELLClass = mkFType10_DOORBELLClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, srcTID := 0
				, info_msb := 0
				, info_lsb := 0
			  ]
		ENDIF 

	outputs_Ftype6_IOStreamWrClassPacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType6_StreamWrClass = IF (index = 0) 
	  THEN LET wr_Ftype6_StreamWrPkt : FType6_StreamWrClass = LET x : FType6_StreamWrClass = mkFType6_StreamWrClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, addr := 0
				, xamsbs := 0
			  ]
		 IN wr_Ftype6_StreamWrPkt
		ELSE LET x : FType6_StreamWrClass = mkFType6_StreamWrClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, addr := 0
				, xamsbs := 0
			  ]
		ENDIF 

	outputs_Ftype5_IOWrClassPacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType5_WriteClass = IF (index = 0) 
	  THEN LET wr_Ftype5_WritePkt : FType5_WriteClass = LET x : FType5_WriteClass = mkFType5_WriteClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, wrsize := 0
				, srcTID := 0
				, addr := 0
				, wdptr := 0
				, xamsbs := 0
				, data := Nothing[Data,mkData]
			  ]
		 IN wr_Ftype5_WritePkt
		ELSE LET x : FType5_WriteClass = mkFType5_WriteClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, wrsize := 0
				, srcTID := 0
				, addr := 0
				, wdptr := 0
				, xamsbs := 0
				, data := Nothing[Data,mkData]
			  ]
		ENDIF 

	outputs_Ftype2_IOReqClassPacket_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : FType2_RequestClass = IF (index = 0) 
	  THEN LET wr_Ftype2_RequestPkt : FType2_RequestClass = LET x : FType2_RequestClass = mkFType2_RequestClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, rdsize := 0
				, srcTID := 0
				, addr := 0
				, wdptr := 0
				, xamsbs := 0
			  ]
		 IN wr_Ftype2_RequestPkt
		ELSE LET x : FType2_RequestClass = mkFType2_RequestClass
			  IN x WITH [ tt := 0
				, ftype := 0
				, ttype := 0
				, rdsize := 0
				, srcTID := 0
				, addr := 0
				, wdptr := 0
				, xamsbs := 0
			  ]
		ENDIF 

	outputs_TxReady_From_MReq_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReq_Rdy : bool = False
		 IN wr_MReq_Rdy
		ELSE False
		ENDIF 

	mreq_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN (NOT wr_MReqIfcPkt`mreqcntrl`mreq_sof)
		ELSE False
		ENDIF 

	mreq_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN (NOT wr_MReqIfcPkt`mreqcntrl`mreq_eof)
		ELSE False
		ENDIF 

	mreq_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN (NOT wr_MReqIfcPkt`mreqcntrl`mreq_vld)
		ELSE False
		ENDIF 

	mreq_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : TT = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_tt
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : Data = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_vld = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_data
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_crf
			  else False
			endif
		ELSE False
		ENDIF 

	mreq_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : Prio = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN wr_MReqIfcPkt`mreqdata`mreq_prio
		ELSE 0
		ENDIF 

	mreq_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_ftype
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_ttype
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : DestId = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN LET lv_TTMreqValue : TT = wr_MReqIfcPkt`mreqdata`mreq_tt
			, lv_MreqDestID : DestId = if ( lv_TTMreqValue = 2 )
			  then wr_MReqIfcPkt`mreqdata`mreq_dest_id
			  else if ( lv_TTMreqValue = 1 )
			  then ( bitConcat ((bitSelect(wr_MReqIfcPkt`mreqdata`mreq_dest_id, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_MReqIfcPkt`mreqdata`mreq_dest_id, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then lv_MreqDestID
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : SourceId = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN LET lv_TTMreqValue : TT = wr_MReqIfcPkt`mreqdata`mreq_tt
			, lv_MreqSrcID : DestId = if ( lv_TTMreqValue = 2 )
			  then wr_MReqIfcPkt`mreqdata`mreq_source_id
			  else if ( lv_TTMreqValue = 1 )
			  then ( bitConcat ((bitSelect(wr_MReqIfcPkt`mreqdata`mreq_source_id, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_MReqIfcPkt`mreqdata`mreq_source_id, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then lv_MreqSrcID
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : TranId = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_tid
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_offset_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : Offset = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_offset
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_byte_en_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : ByteEn = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_byte_en
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_byte_count_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : ByteCount = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN if ( wr_MReqIfcPkt`mreqcntrl`mreq_sof = True )
			  then wr_MReqIfcPkt`mreqdata`mreq_byte_count
			  else 0
			endif
		ELSE 0
		ENDIF 

	mreq_local_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_MReqIfcPkt : MaintenanceReqIfcPkt = if (Just?(outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse)))
		        then LET mreqifc = (outputs_MaintainReqIfcPkt_(0, pre, pre`rio_ModRxPktFtypeAnalyse))`value
			IN mreqifc
		        else LET x : MaintenanceReqIfcPkt = mkMaintenanceReqIfcPkt
			  IN x WITH [ mreqcntrl := LET x : MaintenanceReqIfcCntrl = mkMaintenanceReqIfcCntrl
			  IN x WITH [ mreq_sof := False
				, mreq_eof := False
				, mreq_vld := False
			  ]
				, mreqdata := LET x : MaintenanceReqIfcData = mkMaintenanceReqIfcData
			  IN x WITH [ mreq_tt := 0
				, mreq_data := 0
				, mreq_crf := False
				, mreq_prio := 0
				, mreq_ftype := 0
				, mreq_ttype := 0
				, mreq_dest_id := 0
				, mreq_source_id := 0
				, mreq_tid := 0
				, mreq_offset := 0
				, mreq_byte_en := 0
				, mreq_byte_count := 0
				, mreq_local := False
			  ]
			  ]
		      endif
		 IN wr_MReqIfcPkt`mreqdata`mreq_local
		ELSE False
		ENDIF 

	outputs_TxReady_From_TReq_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_TgtReq_rdy : bool = False
		 IN wr_TgtReq_rdy
		ELSE False
		ENDIF 

	treq_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN (NOT wr_TargetReqIfcPktFirst`treqcntrl`treq_sof)
		ELSE False
		ENDIF 

	treq_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN (NOT wr_TargetReqIfcPktFirst`treqcntrl`treq_eof)
		ELSE False
		ENDIF 

	treq_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN (NOT wr_TargetReqIfcPktFirst`treqcntrl`treq_vld)
		ELSE False
		ENDIF 

	treq_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : TT = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_tt
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Data = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_vld = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_data
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_crf
			  else False
			endif
		ELSE False
		ENDIF 

	treq_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Prio = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_prio
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_ftype
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_ttype
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : DestId = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN LET lv_TTTreqValue : TT = wr_TargetReqIfcPktFirst`treqdata`treq_tt
			, lv_TreqDestID : DestId = if ( lv_TTTreqValue = 2 )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_destid
			  else if ( lv_TTTreqValue = 1 )
			  then ( bitConcat ((bitSelect(wr_TargetReqIfcPktFirst`treqdata`treq_destid, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_TargetReqIfcPktFirst`treqdata`treq_destid, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then lv_TreqDestID
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : SourceId = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN LET lv_TTTreqValue : TT = wr_TargetReqIfcPktFirst`treqdata`treq_tt
			, lv_TreqSrcID : DestId = if ( lv_TTTreqValue = 2 )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_sourceid
			  else if ( lv_TTTreqValue = 1 )
			  then ( bitConcat ((bitSelect(wr_TargetReqIfcPktFirst`treqdata`treq_sourceid, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_TargetReqIfcPktFirst`treqdata`treq_sourceid, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then lv_TreqSrcID
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : TranId = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_tid
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_addr_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Addr = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_addr
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_byte_count_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : ByteCount = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_byte_count
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_byte_en_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : ByteEn = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_eof = True )
			  then wr_TargetReqIfcPktFirst`treqdata`treq_byte_en
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_db_info_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : DoorBell = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqmsg`treq_db_info
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_msg_len_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : MsgLen = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqmsg`treq_msg_len
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_msg_seg_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : MsgSeg = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqmsg`treq_msg_seg
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_mbox_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Bit(6) = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqmsg`treq_mbox
			  else 0
			endif
		ELSE 0
		ENDIF 

	treq_letter_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetReqIFC) : Mletter = IF (index = 0) 
	  THEN LET wr_TargetReqIfcPktFirst : TargetReqIfcPkt = LET x : TargetReqIfcPkt = mkTargetReqIfcPkt
			  IN x WITH [ treqcntrl := LET x : TargetReqIfcCntrl = mkTargetReqIfcCntrl
			  IN x WITH [ treq_sof := False
				, treq_eof := False
				, treq_vld := False
			  ]
				, treqdata := LET x : TargetReqIfcData = mkTargetReqIfcData
			  IN x WITH [ treq_tt := 0
				, treq_data := 0
				, treq_crf := False
				, treq_prio := 0
				, treq_ftype := 0
				, treq_destid := 0
				, treq_sourceid := 0
				, treq_tid := 0
				, treq_ttype := 0
				, treq_addr := 0
				, treq_byte_count := 0
				, treq_byte_en := 0
			  ]
				, treqmsg := LET x : TargetReqIfcMsg = mkTargetReqIfcMsg
			  IN x WITH [ treq_db_info := 0
				, treq_msg_len := 0
				, treq_msg_seg := 0
				, treq_mbox := 0
				, treq_letter := 0
			  ]
			  ]
		 IN if ( wr_TargetReqIfcPktFirst`treqcntrl`treq_sof = True )
			  then wr_TargetReqIfcPktFirst`treqmsg`treq_letter
			  else 0
			endif
		ELSE 0
		ENDIF 

	outputs_TxReady_From_IResp_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_iresp_rdy : bool = False
		 IN wr_iresp_rdy
		ELSE False
		ENDIF 

	outputs_TxReadyOut_From_Analyze_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_RxPktFTypeAnalyse) : bool = IF (index = 0) 
	  THEN LET wr_TxRdy_IRespIn : bool = outputs_TxReady_From_IResp_(0, pre, pre`rio_ModInsInitRespIFC)
		, wr_TxRdy_TReqIn : bool = outputs_TxReady_From_TReq_(0, pre, pre`rio_ModInsTgtReqIFC)
		, wr_TxRdy_MReqIn : bool = outputs_TxReady_From_MReq_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		 IN ( ( wr_TxRdy_IRespIn AND wr_TxRdy_TReqIn ) AND wr_TxRdy_MReqIn )
		ELSE False
		ENDIF 

	link_rx_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_PktTransportParse) : bool = IF (index = 0) 
	  THEN LET wr_TxReady_In : bool = outputs_TxReadyOut_From_Analyze_(0, pre, pre`rio_ModRxPktFtypeAnalyse)
		 IN wr_TxReady_In
		ELSE False
		ENDIF 

	iresp_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN (NOT wr_InitRespIfcPktFirst`irespcntrl`iresp_sof)
		ELSE False
		ENDIF 

	iresp_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN (NOT wr_InitRespIfcPktFirst`irespcntrl`iresp_eof)
		ELSE False
		ENDIF 

	iresp_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN (NOT wr_InitRespIfcPktFirst`irespcntrl`iresp_vld)
		ELSE False
		ENDIF 

	iresp_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : TT = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_tt
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Data = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_vld = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_data
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_crf
			  else False
			endif
		ELSE False
		ENDIF 

	iresp_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Prio = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN wr_InitRespIfcPktFirst`irespdata`iresp_prio
		ELSE 0
		ENDIF 

	iresp_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_ftype
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Tpye = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_ttype
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : DestId = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN LET lv_TTIrespValue : TT = wr_InitRespIfcPktFirst`irespdata`iresp_tt
			, lv_IrespDestID : DestId = if ( lv_TTIrespValue = 2 )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_destid
			  else if ( lv_TTIrespValue = 1 )
			  then ( bitConcat ((bitSelect(wr_InitRespIfcPktFirst`irespdata`iresp_destid, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_InitRespIfcPktFirst`irespdata`iresp_destid, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then lv_IrespDestID
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : SourceId = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN LET lv_TTIrespValue : TT = wr_InitRespIfcPktFirst`irespdata`iresp_tt
			, lv_IrespSrcID : DestId = if ( lv_TTIrespValue = 2 )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_sourceid
			  else if ( lv_TTIrespValue = 1 )
			  then ( bitConcat ((bitSelect(wr_InitRespIfcPktFirst`irespdata`iresp_sourceid, 31, 16)), 0, 16))
			  else ( bitConcat ((bitSelect(wr_InitRespIfcPktFirst`irespdata`iresp_sourceid, 31, 24)), 0, 24))
			endif
			endif
			IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then lv_IrespSrcID
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_status_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Status = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_status
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : TranId = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespdata`iresp_tid
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_local_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN wr_InitRespIfcPktFirst`irespdata`iresp_local
		ELSE False
		ENDIF 

	iresp_msg_seg_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : MsgSeg = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespmsg`iresp_msg_seg
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_mbox_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Bit(2) = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespmsg`iresp_mbox
			  else 0
			endif
		ELSE 0
		ENDIF 

	iresp_letter_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorRespIFC) : Mletter = IF (index = 0) 
	  THEN LET wr_InitRespIfcPktFirst : InitiatorRespIfcPkt = LET x : InitiatorRespIfcPkt = mkInitiatorRespIfcPkt
			  IN x WITH [ irespcntrl := LET x : InitRespIfcCntrl = mkInitRespIfcCntrl
			  IN x WITH [ iresp_sof := False
				, iresp_eof := False
				, iresp_vld := False
			  ]
				, irespdata := LET x : InitRespIfcData = mkInitRespIfcData
			  IN x WITH [ iresp_tt := 0
				, iresp_data := 0
				, iresp_crf := False
				, iresp_prio := 0
				, iresp_ftype := 0
				, iresp_ttype := 0
				, iresp_destid := 0
				, iresp_sourceid := 0
				, iresp_status := 0
				, iresp_tid := 0
				, iresp_local := False
			  ]
				, irespmsg := LET x : InitRespIfcMsg = mkInitRespIfcMsg
			  IN x WITH [ iresp_msg_seg := 0
				, iresp_mbox := 0
				, iresp_letter := 0
			  ]
			  ]
		 IN if ( wr_InitRespIfcPktFirst`irespcntrl`iresp_sof = True )
			  then wr_InitRespIfcPktFirst`irespmsg`iresp_letter
			  else 0
			endif
		ELSE 0
		ENDIF 

	outputs_MaintainRespIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceRespIFC) : MaintenanceRespIfcPkt = IF (index = 0) 
	  THEN LET wr_MRespIfcCntrl : MaintenanceRespIfcCntrl = LET x : MaintenanceRespIfcCntrl = mkMaintenanceRespIfcCntrl
			  IN x WITH [ mresp_sof := False
				, mresp_eof := False
				, mresp_vld := False
			  ]
		, wr_MRespIfcData : MaintenanceRespIfcData = LET x : MaintenanceRespIfcData = mkMaintenanceRespIfcData
			  IN x WITH [ mresp_tt := 0
				, mresp_data := 0
				, mresp_crf := False
				, mresp_prio := 0
				, mresp_ftype := 0
				, mresp_ttype := 0
				, mresp_dest_id := 0
				, mresp_hop_count := 0
				, mresp_tid := 0
				, mresp_local := False
				, mresp_status := 0
			  ]
		 IN LET x : MaintenanceRespIfcPkt = mkMaintenanceRespIfcPkt
			  IN x WITH [ mrespcntrl := wr_MRespIfcCntrl
				, mrespdata := wr_MRespIfcData
			  ]
		ELSE LET x : MaintenanceRespIfcPkt = mkMaintenanceRespIfcPkt
			  IN x WITH [ mrespcntrl := LET x : MaintenanceRespIfcCntrl = mkMaintenanceRespIfcCntrl
			  IN x WITH [ mresp_sof := False
				, mresp_eof := False
				, mresp_vld := False
			  ]
				, mrespdata := LET x : MaintenanceRespIfcData = mkMaintenanceRespIfcData
			  IN x WITH [ mresp_tt := 0
				, mresp_data := 0
				, mresp_crf := False
				, mresp_prio := 0
				, mresp_ftype := 0
				, mresp_ttype := 0
				, mresp_dest_id := 0
				, mresp_hop_count := 0
				, mresp_tid := 0
				, mresp_local := False
				, mresp_status := 0
			  ]
			  ]
		ENDIF 

	outputs_MaintainRespIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : MaintenanceRespIfcPkt = IF (index = 0) 
	  THEN LET wr_MaintainRespIfc : MaintenanceRespIfcPkt = outputs_MaintainRespIfcPkt_(0, pre, pre`rio_ModInsMaintenanceRespIFC)
		 IN wr_MaintainRespIfc
		ELSE LET x : MaintenanceRespIfcPkt = mkMaintenanceRespIfcPkt
			  IN x WITH [ mrespcntrl := LET x : MaintenanceRespIfcCntrl = mkMaintenanceRespIfcCntrl
			  IN x WITH [ mresp_sof := False
				, mresp_eof := False
				, mresp_vld := False
			  ]
				, mrespdata := LET x : MaintenanceRespIfcData = mkMaintenanceRespIfcData
			  IN x WITH [ mresp_tt := 0
				, mresp_data := 0
				, mresp_crf := False
				, mresp_prio := 0
				, mresp_ftype := 0
				, mresp_ttype := 0
				, mresp_dest_id := 0
				, mresp_hop_count := 0
				, mresp_tid := 0
				, mresp_local := False
				, mresp_status := 0
			  ]
			  ]
		ENDIF 

	mresp_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MaintenanceRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_RxReady_In : bool = False
		 IN wr_RxReady_In
		ELSE False
		ENDIF 

	outputs_TgtRespIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetRespIFC) : TargetRespIfcPkt = IF (index = 0) 
	  THEN LET wr_TRespIfcCntrl : TargetRespIfcCntrl = LET x : TargetRespIfcCntrl = mkTargetRespIfcCntrl
			  IN x WITH [ tresp_sof := False
				, tresp_eof := False
				, tresp_vld := False
				, tresp_dsc := False
			  ]
		, wr_TRespIfcData : TargetRespIfcData = LET x : TargetRespIfcData = mkTargetRespIfcData
			  IN x WITH [ tresp_tt := 0
				, tresp_data := 0
				, tresp_crf := False
				, tresp_prio := 0
				, tresp_ftype := 0
				, tresp_dest_id := 0
				, tresp_status := 0
				, tresp_tid := 0
				, tresp_ttype := 0
				, tresp_no_data := True
			  ]
		, wr_TRespIfcMsg : TargetRespIfcMsg = LET x : TargetRespIfcMsg = mkTargetRespIfcMsg
			  IN x WITH [ tresp_msg_seg := 0
				, tresp_mbox := 0
				, tresp_letter := 0
			  ]
		 IN LET x : TargetRespIfcPkt = mkTargetRespIfcPkt
			  IN x WITH [ trespcntrl := wr_TRespIfcCntrl
				, trespdata := wr_TRespIfcData
				, trespmsg := wr_TRespIfcMsg
			  ]
		ELSE LET x : TargetRespIfcPkt = mkTargetRespIfcPkt
			  IN x WITH [ trespcntrl := LET x : TargetRespIfcCntrl = mkTargetRespIfcCntrl
			  IN x WITH [ tresp_sof := False
				, tresp_eof := False
				, tresp_vld := False
				, tresp_dsc := False
			  ]
				, trespdata := LET x : TargetRespIfcData = mkTargetRespIfcData
			  IN x WITH [ tresp_tt := 0
				, tresp_data := 0
				, tresp_crf := False
				, tresp_prio := 0
				, tresp_ftype := 0
				, tresp_dest_id := 0
				, tresp_status := 0
				, tresp_tid := 0
				, tresp_ttype := 0
				, tresp_no_data := True
			  ]
				, trespmsg := LET x : TargetRespIfcMsg = mkTargetRespIfcMsg
			  IN x WITH [ tresp_msg_seg := 0
				, tresp_mbox := 0
				, tresp_letter := 0
			  ]
			  ]
		ENDIF 

	outputs_TgtRespIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : TargetRespIfcPkt = IF (index = 0) 
	  THEN LET wr_TgtRespIfc : TargetRespIfcPkt = outputs_TgtRespIfcPkt_(0, pre, pre`rio_ModInsTgtRespIFC)
		 IN wr_TgtRespIfc
		ELSE LET x : TargetRespIfcPkt = mkTargetRespIfcPkt
			  IN x WITH [ trespcntrl := LET x : TargetRespIfcCntrl = mkTargetRespIfcCntrl
			  IN x WITH [ tresp_sof := False
				, tresp_eof := False
				, tresp_vld := False
				, tresp_dsc := False
			  ]
				, trespdata := LET x : TargetRespIfcData = mkTargetRespIfcData
			  IN x WITH [ tresp_tt := 0
				, tresp_data := 0
				, tresp_crf := False
				, tresp_prio := 0
				, tresp_ftype := 0
				, tresp_dest_id := 0
				, tresp_status := 0
				, tresp_tid := 0
				, tresp_ttype := 0
				, tresp_no_data := True
			  ]
				, trespmsg := LET x : TargetRespIfcMsg = mkTargetRespIfcMsg
			  IN x WITH [ tresp_msg_seg := 0
				, tresp_mbox := 0
				, tresp_letter := 0
			  ]
			  ]
		ENDIF 

	tresp_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_TargetRespIFC) : bool = IF (index = 0) 
	  THEN LET wr_RxReady_In : bool = False
		 IN wr_RxReady_In
		ELSE False
		ENDIF 

	outputs_InitReqIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorReqIFC) : InitiatorReqIfcPkt = IF (index = 0) 
	  THEN LET wr_IReqIfcCntrl : InitReqIfcCntrl = LET x : InitReqIfcCntrl = mkInitReqIfcCntrl
			  IN x WITH [ ireq_sof := False
				, ireq_eof := False
				, ireq_vld := False
				, ireq_dsc := False
			  ]
		, wr_IReqIfcData : InitReqIfcData = LET x : InitReqIfcData = mkInitReqIfcData
			  IN x WITH [ ireq_tt := 0
				, ireq_data := 0
				, ireq_crf := False
				, ireq_prio := 0
				, ireq_ftype := 0
				, ireq_destid := 0
				, ireq_addr := 0
				, ireq_hopcount := 0
				, ireq_tid := 0
				, ireq_ttype := 0
				, ireq_byte_count := 0
				, ireq_byte_en := 0
				, ireq_local := False
			  ]
		, wr_IReqIfcMsg : InitReqIfcMsg = LET x : InitReqIfcMsg = mkInitReqIfcMsg
			  IN x WITH [ ireq_db_info := 0
				, ireq_msg_len := 0
				, ireq_msg_seg := 0
				, ireq_mbox := 0
				, ireq_letter := 0
			  ]
		 IN LET x : InitiatorReqIfcPkt = mkInitiatorReqIfcPkt
			  IN x WITH [ ireqcntrl := wr_IReqIfcCntrl
				, ireqdata := wr_IReqIfcData
				, ireqmsg := wr_IReqIfcMsg
			  ]
		ELSE LET x : InitiatorReqIfcPkt = mkInitiatorReqIfcPkt
			  IN x WITH [ ireqcntrl := LET x : InitReqIfcCntrl = mkInitReqIfcCntrl
			  IN x WITH [ ireq_sof := False
				, ireq_eof := False
				, ireq_vld := False
				, ireq_dsc := False
			  ]
				, ireqdata := LET x : InitReqIfcData = mkInitReqIfcData
			  IN x WITH [ ireq_tt := 0
				, ireq_data := 0
				, ireq_crf := False
				, ireq_prio := 0
				, ireq_ftype := 0
				, ireq_destid := 0
				, ireq_addr := 0
				, ireq_hopcount := 0
				, ireq_tid := 0
				, ireq_ttype := 0
				, ireq_byte_count := 0
				, ireq_byte_en := 0
				, ireq_local := False
			  ]
				, ireqmsg := LET x : InitReqIfcMsg = mkInitReqIfcMsg
			  IN x WITH [ ireq_db_info := 0
				, ireq_msg_len := 0
				, ireq_msg_seg := 0
				, ireq_mbox := 0
				, ireq_letter := 0
			  ]
			  ]
		ENDIF 

	outputs_InitReqIfcPkt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_IOPktConcatenation) : InitiatorReqIfcPkt = IF (index = 0) 
	  THEN LET wr_InitReqIfc : InitiatorReqIfcPkt = outputs_InitReqIfcPkt_(0, pre, pre`rio_ModInsInitReqIFC)
		 IN wr_InitReqIfc
		ELSE LET x : InitiatorReqIfcPkt = mkInitiatorReqIfcPkt
			  IN x WITH [ ireqcntrl := LET x : InitReqIfcCntrl = mkInitReqIfcCntrl
			  IN x WITH [ ireq_sof := False
				, ireq_eof := False
				, ireq_vld := False
				, ireq_dsc := False
			  ]
				, ireqdata := LET x : InitReqIfcData = mkInitReqIfcData
			  IN x WITH [ ireq_tt := 0
				, ireq_data := 0
				, ireq_crf := False
				, ireq_prio := 0
				, ireq_ftype := 0
				, ireq_destid := 0
				, ireq_addr := 0
				, ireq_hopcount := 0
				, ireq_tid := 0
				, ireq_ttype := 0
				, ireq_byte_count := 0
				, ireq_byte_en := 0
				, ireq_local := False
			  ]
				, ireqmsg := LET x : InitReqIfcMsg = mkInitReqIfcMsg
			  IN x WITH [ ireq_db_info := 0
				, ireq_msg_len := 0
				, ireq_msg_seg := 0
				, ireq_mbox := 0
				, ireq_letter := 0
			  ]
			  ]
		ENDIF 

	ireq_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_InitiatorReqIFC) : bool = IF (index = 0) 
	  THEN LET wr_RxReady_In : bool = False
		 IN wr_RxReady_In
		ELSE False
		ENDIF 

	link_tx_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN pkgen_sof_n_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE False
		ENDIF 

	link_tx_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN pkgen_eof_n_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE False
		ENDIF 

	link_tx_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN pkgen_vld_n_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE False
		ENDIF 

	link_tx_dsc_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN pkgen_dsc_n_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE False
		ENDIF 

	link_tx_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : DataPkt = IF (index = 0) 
	  THEN pkgen_data_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE 0
		ENDIF 

	link_tx_rem_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Bit(4) = IF (index = 0) 
	  THEN pkgen_tx_rem_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE 0
		ENDIF 

	link_tx_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN pkgen_crf_(0, pre, pre`rio_ModInsIOPktGeneration)
		ELSE False
		ENDIF 

	link_rx_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN link_rx_rdy_n_(0, pre, pre`rio_ModRxPktParsing)
		ELSE False
		ENDIF 

	mreq_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mreq_sof_n_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE False
		ENDIF 

	mreq_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mreq_eof_n_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE False
		ENDIF 

	mreq_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mreq_vld_n_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE False
		ENDIF 

	mreq_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TT = IF (index = 0) 
	  THEN mreq_tt_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Data = IF (index = 0) 
	  THEN mreq_data_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mreq_crf_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE False
		ENDIF 

	mreq_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Prio = IF (index = 0) 
	  THEN mreq_prio_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN mreq_ftype_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN mreq_ttype_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : DestId = IF (index = 0) 
	  THEN mreq_dest_id_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : SourceId = IF (index = 0) 
	  THEN mreq_source_id_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TranId = IF (index = 0) 
	  THEN mreq_tid_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_offset_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Offset = IF (index = 0) 
	  THEN mreq_offset_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_byte_en_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : ByteEn = IF (index = 0) 
	  THEN mreq_byte_en_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_byte_count_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : ByteCount = IF (index = 0) 
	  THEN mreq_byte_count_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE 0
		ENDIF 

	mreq_local_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mreq_local_(0, pre, pre`rio_ModInsMaintenanceReqIFC)
		ELSE False
		ENDIF 

	treq_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN treq_sof_n_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE False
		ENDIF 

	treq_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN treq_eof_n_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE False
		ENDIF 

	treq_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN treq_vld_n_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE False
		ENDIF 

	treq_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TT = IF (index = 0) 
	  THEN treq_tt_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Data = IF (index = 0) 
	  THEN treq_data_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN treq_crf_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE False
		ENDIF 

	treq_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Prio = IF (index = 0) 
	  THEN treq_prio_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN treq_ftype_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : DestId = IF (index = 0) 
	  THEN treq_dest_id_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : SourceId = IF (index = 0) 
	  THEN treq_source_id_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TranId = IF (index = 0) 
	  THEN treq_tid_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN treq_ttype_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_addr_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Addr = IF (index = 0) 
	  THEN treq_addr_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_byte_count_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : ByteCount = IF (index = 0) 
	  THEN treq_byte_count_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_byte_en_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : ByteEn = IF (index = 0) 
	  THEN treq_byte_en_n_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_db_info_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : DoorBell = IF (index = 0) 
	  THEN treq_db_info_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_msg_len_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : MsgLen = IF (index = 0) 
	  THEN treq_msg_len_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_msg_seg_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : MsgSeg = IF (index = 0) 
	  THEN treq_msg_seg_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_mbox_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Bit(6) = IF (index = 0) 
	  THEN treq_mbox_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	treq_letter_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Mletter = IF (index = 0) 
	  THEN treq_letter_(0, pre, pre`rio_ModInsTgtReqIFC)
		ELSE 0
		ENDIF 

	iresp_sof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN iresp_sof_n_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE False
		ENDIF 

	iresp_eof_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN iresp_eof_n_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE False
		ENDIF 

	iresp_vld_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN iresp_vld_n_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE False
		ENDIF 

	iresp_tt_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TT = IF (index = 0) 
	  THEN iresp_tt_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_data_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Data = IF (index = 0) 
	  THEN iresp_data_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_crf_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN iresp_crf_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE False
		ENDIF 

	iresp_prio_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Prio = IF (index = 0) 
	  THEN iresp_prio_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_ftype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN iresp_ftype_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_ttype_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Tpye = IF (index = 0) 
	  THEN iresp_ttype_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_dest_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : DestId = IF (index = 0) 
	  THEN iresp_dest_id_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_source_id_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : SourceId = IF (index = 0) 
	  THEN iresp_source_id_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_status_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Status = IF (index = 0) 
	  THEN iresp_status_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_tid_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : TranId = IF (index = 0) 
	  THEN iresp_tid_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_local_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN iresp_local_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE False
		ENDIF 

	iresp_msg_seg_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : MsgSeg = IF (index = 0) 
	  THEN iresp_msg_seg_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_mbox_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Bit(2) = IF (index = 0) 
	  THEN iresp_mbox_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	iresp_letter_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : Mletter = IF (index = 0) 
	  THEN iresp_letter_(0, pre, pre`rio_ModInsInitRespIFC)
		ELSE 0
		ENDIF 

	mresp_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN mresp_rdy_n_(0, pre, pre`rio_ModInsMaintenanceRespIFC)
		ELSE False
		ENDIF 

	tresp_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN tresp_rdy_n_(0, pre, pre`rio_ModInsTgtRespIFC)
		ELSE False
		ENDIF 

	ireq_rdy_n_ (index : nat, pre : RapidIO_MainCore, mod : RapidIO_MainCore) : bool = IF (index = 0) 
	  THEN ireq_rdy_n_(0, pre, pre`rio_ModInsInitReqIFC)
		ELSE False
		ENDIF 


	
end Methods