defined_operators[(IMPORTING Time) delta_t:posreal]: THEORY
%-------------------------------------------------------------------------------
%
% This file defines several operators that might be useful to specify
% required properties.
%
%-------------------------------------------------------------------------------

BEGIN

  IMPORTING ClockTick[delta_t]
  importing ints@mod_nat

  Condition_type: TYPE = pred[tick]

  t, t_1, t_2, t_r, t_f, ts, te: VAR tick

  i, P: VAR Condition_type

  duration: VAR tick

%------------------------------------ logical gates --------------------------------------------

% NOT gate
  neg(i,out:bool): bool = (out = NOT i)

% AND gate
  conj(i1,i2,out:bool): bool = (out = (i1 & i2))

  conj_3(i1,i2,i3,out:bool): bool = (out = (i1 & i2 & i3))

  conj_4(i1,i2,i3,i4,out:bool): bool = (out = (i1 & i2 & i3 & i4))

% OR gate
  disj(i1,i2,out:bool): bool = (out = (i1 OR i2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Revised version
  disj(i1:pred[tick],
       i2:pred[tick],
       out:pred[tick]): bool =
     FORALL (t:tick):
          out(t) = (i1(t) OR i2(t))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  disj_4(i1,i2,i3,i4,out:bool): bool = (out = (i1 OR i2 OR i3 OR i4))

% Z_{-1}
  Z(i,out:pred[tick])(t): bool = 
                       IF init(t) THEN (out(t) = False) 
                       ELSE out(t) = i(pre(t)) ENDIF

% --------------------------- Standard arithmetic functions ------------------------------------

% ADD " + "
  add(i1,i2:int): int = (i1 + i2)

  add(i1,i2:real): real = (i1 + i2)

  add(i1,i2,out:real): bool = (out = (i1 + i2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Revised version
  add(i1:[tick->real],
      i2:[tick->real],
      out:[tick->real]): bool =
     FORALL (t:tick):
         (out(t) = (i1(t) + i2(t)))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  add(en,eno:pred[tick],i1,i2,out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                 | (out(t) = -1) & NOT eno(t)                    || 
     | NOT init(t) & en(t)     | (out(t) = (i1(pre(t)) + i2(pre(t)))) & eno(t) ||
     | NOT init(t) & NOT en(t) | (out(t) = i1(pre(t))) & NOT eno(t)            ||
    ENDTABLE

  add_1(en,eno:pred[tick],i,out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                 | (out(t) = -1) & NOT eno(t)          || 
     | NOT init(t) & en(t)     | (out(t) = (i(pre(t)) + 1)) & eno(t) ||
     | NOT init(t) & NOT en(t) | (out(t) = i(pre(t))) & NOT eno(t)   ||
    ENDTABLE

% MUL " * "
  mul(i1,i2:int): int = (i1 * i2)

% SUB " - " 
  sub(i1,i2:int): int = (i1 - i2)

  sub(i1,i2:real): real = (i1 - i2)

  sub(i1,i2,out:real): bool = (out = (i1 - i2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Revised version
  sub(i1:[tick->real],
      i2:[tick->real],
      out:[tick->real]): bool =
     FORALL (t:tick):
          (out(t) = (i1(t) - i2(t)))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  sub(en,eno:pred[tick],i1,i2,out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                 | (out(t) = -1) & NOT eno(t)                    || 
     | NOT init(t) & en(t)     | (out(t) = (i1(pre(t)) - i2(pre(t)))) & eno(t) ||
     | NOT init(t) & NOT en(t) | (out(t) = i1(pre(t))) & NOT eno(t)            ||
    ENDTABLE

  sub_1(en,eno:pred[tick],i,out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                 | (out(t) = -1) & NOT eno(t)          || 
     | NOT init(t) & en(t)     | (out(t) = (i(pre(t)) - 1)) & eno(t) ||
     | NOT init(t) & NOT en(t) | (out(t) = i(pre(t))) & NOT eno(t)   ||
    ENDTABLE

% DIV " / "
  int_div(i1:int, i2:{i:int| i /= 0}) : int = div (i1, i2)

  div(i1:real,i2:{i:real| i /= 0 }): real = i1 / i2

  div(i1:real,i2:{i:real| i /= 0 },out:real): bool = (out = (i1 / i2)) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Revised version
  div(i1:[tick->real],
      i2:[tick->{i:real| i /= 0 }],
      out:[tick->real]): bool =
     FORALL (t:tick):
         (out(t) = (i1(t) / i2(t)))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% MOD
% defined in prelude

% EXPT
% defined in prelude

% MOVE " := "
% without EN/ENO 
  move(i,out:int): bool = (out = i)
% with EN/ENO, output type: int
  move_int(en,eno:pred[tick],i,out:[tick->int])(t): bool = 
%   FORALL t:
    TABLE
     | init(t)                 | (out(t) = 0) & NOT eno(t)           || 
     | NOT init(t) & en(t)     | (out(t) = i(t)) & eno(t)            ||
     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t) ||
    ENDTABLE
% with EN/ENO, output type: bool
  move_bool(en,eno:pred[tick],i,out:pred[tick])(t): bool = 
 %  FORALL t:
    TABLE
     | init(t)                 | (out(t) = False) & NOT eno(t)       || 
     | NOT init(t) & en(t)     | (out(t) = i(t)) & eno(t)            ||
     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t) ||
    ENDTABLE

  move(en:pred[tick],i,out:[tick->int])(t): bool = % no ENO
 %  FORALL t:
    TABLE
     | init(t)                 | (out(t) = 0)           || 
     | NOT init(t) & en(t)     | (out(t) = i(t))        ||
     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) ||
    ENDTABLE


% ---------------------------- Standard comparison functions -----------------------------------

% GT " > ": decreasing sequence
  gt(i1,i2:int): bool = (i1 > i2)

  gt(i1,i2:real): bool = (i1 > i2)

  gt(i1,i2:int,out:bool): bool = (out = (i1 > i2))

% GE " >= ": monotonic sequence
  ge(i1,i2:int): bool = (i1 >= i2)

  ge(i1,i2:real): bool = (i1 >= i2)

% EQ " = ": equality
  eq(i1,i2:int): bool = (i1 = i2)

  eq(en,eno:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                                 | NOT out(t) & NOT eno(t)             || 
     | NOT init(t) & en(t) & (i1(t) = i2(t))   | out(t) & eno(t)                     ||
     | NOT init(t) & en(t) &  (i1(t) /= i2(t)) | NOT out(t) & eno(t)                 ||
     | NOT init(t) & NOT en(t)                 | (out(t) = out(pre(t))) & NOT eno(t) ||
    ENDTABLE

  eq(en:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = % no ENO
   FORALL t:
    TABLE
     | init(t)                                 | NOT out(t)           || 
     | NOT init(t) & en(t) & (i1(t) = i2(t))   | out(t)               ||
     | NOT init(t) & en(t) &  (i1(t) /= i2(t)) | NOT out(t)           ||
     | NOT init(t) & NOT en(t)                 | out(t) = out(pre(t)) ||
    ENDTABLE

% LE " <= ": monotonic sequence
  le(i1,i2:int): bool = (i1 <= i2)

  le(i1,i2:real): bool = (i1 <= i2)

% LT " < ": increasing sequence
  lt(i1,i2:int): bool = (i1 < i2)

  lt(i1,i2:int,out:bool): bool = (out = (i1 < i2))

  lt(i1,i2:real): bool = (i1 < i2)

  lt(en,eno:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                                | NOT out(t) & NOT eno(t)             || 
     | NOT init(t) & en(t) & (i1(t) < i2(t))  | out(t) & eno(t)                     ||
     | NOT init(t) & en(t) & (i1(t) >= i2(t)) | NOT out(t) & eno(t)                 ||
     | NOT init(t) & NOT en(t)                | (out(t) = out(pre(t))) & NOT eno(t) ||
    ENDTABLE

% NE " <> ": inequality (non-extensible)
  ne(i1,i2:int): bool = (i1 /= i2)

%------------------------------ Standard selection functions -------------------------------------

% SEL "SEL"
  sel(g:bool,i1,i2:int): int = IF g = False THEN i1 ELSE i2 ENDIF

  sel(en,eno:pred[tick],g:pred[tick],in0,in1:int,out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                        | (out(t) = 0) & NOT eno(t)           || 
     | NOT init(t) & en(t) & NOT g(t) | (out(t) = in0) & eno(t)             ||
     | NOT init(t) & en(t) & g(t)     | (out(t) = in1) & eno(t)             ||
     | NOT init(t) & NOT en(t)        | (out(t) = out(pre(t))) & NOT eno(t) ||
    ENDTABLE

  sel(g:pred[tick],in0,in1:[tick->int],out:[tick->int])(t): bool = 
   FORALL t:
    TABLE
     | init(t)                | out(t) = 0      || 
     | NOT init(t) & NOT g(t) | out(t) = in0(t) ||
     | NOT init(t) & g(t)     | out(t) = in1(t) ||
    ENDTABLE

% MIN " MIN "
  min(i1,i2:int): int = IF i1 <= i2 THEN i1 ELSE i2 ENDIF

% MAX " MAX "
  max(i1,i2:int): int = IF i1 >= i2 THEN i1 ELSE i2 ENDIF

% LIMIT
  limit(i,mn,mx:int): int = min(max(i,mn),mx)

  limit(en,eno:pred[tick],i,mn,mx,out:[tick->int])(t): bool = 
    FORALL t:
      TABLE
        | init(t)                 |  (out(t) = 128) & NOT eno(t)                   ||
        | NOT init(t) & en(t)     | (out(t) = min(max(i(t),mn(t)),mx(t))) & eno(t) ||
        | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t)            ||
       ENDTABLE

% MUX " MUX ", it is an ERROR if k in not within [0,n-1], here n = 4
  mux(k:{i:int| i >= 0 & i <= 3 },i0,i1,i2,i3:int): int = 
    TABLE
     | k = 0 | i0 ||
     | k = 1 | i1 ||
     | k = 2 | i2 ||
     | k = 3 | i3 ||
    ENDTABLE

%--------------- Some operators may be useful for timers properties spec. ------------------------

  before(t_1,t_2:tick): bool = (t_1 < t_2)

  after(t_1,t_2:tick): bool = (t_2 < t_1)

  rising?(i)(t): bool = IF init(t) THEN i(t) ELSE NOT i(pre(t)) & i(t) ENDIF

  falling?(i)(t): bool = IF init(t) THEN i(t) ELSE i(pre(t)) & NOT i(t) ENDIF

  pulse?(i)(t_r:tick, t_f:{ t: tick | t > t_r }): bool =
       IF init(t_r) THEN i(t_r)
       ELSE rising?(i)(t_r) & falling?(i)(t_f) & 
            FORALL (t_n: { t: tick | t > t_r & t < t_f }): i(t_n)
       ENDIF

  Held_For(P,duration)(t): bool = % slightly odified from Jason's version
    EXISTS(t_j:tick):
       (t - t_j >= duration) & (FORALL (t_n: tick | t_n >= t_j & t_n <= t): P(t_n))

  Held_For_ts(P,duration,ts)(t): bool = % new one indicating the time when condition P becomes True
    (t - ts >= duration) & (FORALL (t_n: tick | t_n >= ts & t_n <= t): P(t_n))

   Held_For_ts_te(P,duration,ts,te): bool = 
    (te - ts = duration) & (FORALL (t_n: tick | t_n >= ts & t_n <= te): P(t_n))

  consecutive_ticks?(t_1,t_2:tick): bool = (t_1 < t_2 & t_2 - t_1 = delta_t)

  consecutive_rising_edges?(i:pred[tick],t_m,t_n:tick): bool = 
     FORALL (t_j,t_k:tick):
       consecutive_ticks?(t_j,t_k) & NOT (NOT i(t_j) & i(t_k)) &
       rising?(i)(t_m) & rising?(i)(t_n)



  

END defined_operators

