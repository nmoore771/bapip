TypeDefinitions : theory

begin

	importing arith_bitwise
	importing Maybe
	importing FIFO

	Int(n : int): TYPE = {i:int | -(2^(n-1)) <= i AND i < 2^(n-1)}
	UInt(n : int): TYPE = {i:int | 0 <= i AND i < 2^n}
	Bit(n : int): TYPE = {i:int | 0 <= i AND i < 2^n}

	mkInt(n : int) : Int(n) = 0
	mkUInt(n : int) : UInt(n) = 0
	mkBit(n : int) : Bit(n) = 0

	

	

	PedestrianState : type = {Walk, Stand}
	Colour : type = {Green, Yellow, Red}

	

	

	

	
end TypeDefinitions