FIFO [T: TYPE] : theory

begin

	FIFO : TYPE = 
	  [# data : [nat -> T]
	   , enqptr : nat
	   , deqptr : nat
	   , max : nat
	   #]

	enq (f: FIFO, val : T) : FIFO = f
	  with [ data := f`data with  [ (f`enqptr) := val ]
			    , enqptr := f`enqptr + 1
			    ]

	first (f : FIFO) : T = f`data(f`deqptr)

	deq (f : FIFO) : FIFO = f
	   WITH [ deqptr := f`deqptr + 1
			    ]

	clear (f : FIFO) : FIFO = f
	   WITH [ enqptr := 0
	   	, deqptr := 0
		]

	notEmpty (f : FIFO) : bool = NOT (f`enqptr = f`deqptr)

	notFull (f : FIFO) : bool = NOT (f`enqptr - f`deqptr = f`max)

	mkFIFO (f : FIFO, m : nat) : bool = 
	   f = f with [ enqptr := 0
	       	      , deqptr := 0
		      , max := m
		      ]


end FIFO
