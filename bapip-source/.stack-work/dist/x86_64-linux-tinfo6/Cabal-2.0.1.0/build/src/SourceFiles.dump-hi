
==================== FINAL INTERFACE ====================
2022-04-01 02:15:49.305151776 UTC

interface BAPIP-0.1.0.0-IeoLXJJUcqyHz2cFv4cIMD:SourceFiles 8022
  interface hash: 5f8f1c0922f7c0ef52c58be2b2521714
  ABI hash: 51270efe185be5c6763a4b8edd8bc350
  export-list hash: 591d8e4526b7a949c08ba934e7fe0d63
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: aa1a6078e28560b315026c49539ca393
  sig of: Nothing
  used TH splices: False
  where
exports:
  SourceFiles.arith_BWFile
  SourceFiles.bvcustomFile
  SourceFiles.clockTick
  SourceFiles.definedOperators
  SourceFiles.fifoFile
  SourceFiles.maybeFile
  SourceFiles.monadFile
  SourceFiles.readMe
  SourceFiles.timeFile
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
ec6232e0d592358ccbc199eb04875ad0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SourceFiles.$trModule3
                   SourceFiles.$trModule1) -}
91d459f0dc0eda5b15d8195bebc3cd6e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SourceFiles.$trModule2) -}
26484a74b7bba3d16d6b10754c1c3c80
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SourceFiles"#) -}
3b0b2baf2f755bf33e7484a92a4aa5f9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SourceFiles.$trModule4) -}
76be81259a5e6f27a415348c4bda1768
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("BAPIP-0.1.0.0-IeoLXJJUcqyHz2cFv4cIMD"#) -}
8a2be438ba2609a7dc0c48952ce94a12
  arith_BWFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.arith_BWFile1) -}
c94c755c4f150ddee0d7377411578040
  arith_BWFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("% arith_bitwise.pvs\n\
                 \% author = Nicholas Moore\n\
                 \% last updated October 24, 2019\n\
                 \% \n\
                 \% The purpose of this library is to provide an alternative to the pvs native bitvector library.  The lack of a good solution for nat2bv really cripples the utility of it, in this author's opinion.  \n\
                 \% Also, I don't like their implementation of modulo.\n\
                 \\n\
                 \arith_bitwise : theory\n\
                 \\n\
                 \begin\n\
                 \\n\
                 \\tw, x, y, z, n : VAR nat\n\
                 \\n\
                 \% div \n\
                 \  div (x, y) : nat = floor (x / y)\n\
                 \\n\
                 \% modulo\n\
                 \  mod (x, y) : nat = x - y * div(x,y)\n\
                 \  \n\
                 \% rshift\n\
                 \  rshift (x, y) : nat = div (x, 2^y)\n\
                 \\n\
                 \% lshift\n\
                 \  lshift (x, y) : nat = x * 2^y\n\
                 \\n\
                 \% bitwise OR\n\
                 \  bwOR_inner (x, y, n) : RECURSIVE nat = \n\
                 \    LET n1 = 2 ^ n\n\
                 \      , x1 : nat = mod (div (x,n1), 2)\n\
                 \      , y1 : nat = mod (div (y,n1), 2)\n\
                 \    IN\n\
                 \      IF n1 > x AND n1 > y \n\
                 \\tTHEN 0\n\
                 \\tELSE n1 * mod((x1 + y1 + x1*y1),2) + bwOR_inner(x,y,(n+1))\n\
                 \      ENDIF\n\
                 \    MEASURE n\n\
                 \\n\
                 \  bwOR (x,y) : nat = bwOR_inner (x,y,0)\n\
                 \  \n\
                 \% bitwise OR\n\
                 \  bwXOR_inner (x, y, n) : RECURSIVE nat = \n\
                 \    LET n1 = 2 ^ n\n\
                 \      , x1 : nat = mod (div (x,n1), 2)\n\
                 \      , y1 : nat = mod (div (y,n1), 2)\n\
                 \    IN\n\
                 \      IF n1 > x AND n1 > y \n\
                 \\tTHEN 0\n\
                 \\tELSE n1 * mod((x1 + y1),2) + bwXOR_inner(x,y,(n+1))\n\
                 \      ENDIF\n\
                 \    MEASURE n\n\
                 \\n\
                 \  bwXOR (x,y) : nat = bwOR_inner (x,y,0)\n\
                 \  \n\
                 \% bitwise AND\n\
                 \  bwAND_inner (x, y, n) : RECURSIVE nat = \n\
                 \    LET n1 = 2 ^ n\n\
                 \      , x1 : nat = mod (div (x,n1), 2)\n\
                 \      , y1 : nat = mod (div (y,n1), 2)\n\
                 \    IN\n\
                 \      IF n1 > x AND n1 > y \n\
                 \\tTHEN 0\n\
                 \\tELSE n1 * x1 * y1 + bwAND_inner(x,y,(n+1))\n\
                 \      ENDIF\n\
                 \    MEASURE n\n\
                 \\n\
                 \  bwAND (x,y) : nat = bwAND_inner (x,y,0)\n\
                 \\n\
                 \% bitwise NOT\n\
                 \  bwNOT_inner (x, n) : RECURSIVE nat = \n\
                 \    LET n1 = 2 ^ n\n\
                 \      , x1 : nat = mod (div (x,n1), 2)\n\
                 \    IN\n\
                 \      IF n1 > x  \n\
                 \\tTHEN 0\n\
                 \\tELSE n1 * mod((x1 + 1),2) + bwNOT_inner(x,(n+1))\n\
                 \      ENDIF\n\
                 \    MEASURE n\n\
                 \\n\
                 \  bwNOT (x) : nat = bwNOT_inner (x,0)\n\
                 \  \n\
                 \\n\
                 \% bit select\n\
                 \% equivalent to syntax x[y]\n\
                 \  bitSelect (x, y) : nat = mod(rshift (x, y), 2)\n\
                 \\n\
                 \% bit range select\n\
                 \% equivalent to syntax x[y:z]\n\
                 \  bitSelect (x, y, z) : nat = mod(rshift (x,z), 2^(y-z+1))\n\
                 \\n\
                 \% bit concatenation\n\
                 \% equivalent to syntax {x,y}, where z is the bit size of y.\n\
                 \% at the moment, to concatenate 3 or more things, use nested calls.\n\
                 \  bitConcat (x , y, z) : nat = lshift (x, z) + y \n\
                 \\t\n\
                 \% bitwise AND\n\
                 \\n\
                 \% bitwise OR\n\
                 \\n\
                 \% bitwise NOT\n\
                 \\n\
                 \% bitwise XOR\n\
                 \\n\
                 \  \tmoduloTest : theorem mod(117,10) = 8\n\
                 \\n\
                 \\trshiftTest : theorem rshift (16,2) = 4\n\
                 \\n\
                 \\tlshiftTest : theorem lshift (8,4) = 127\n\
                 \\n\
                 \\tbitselect : theorem bitSelect (64, 2) = 0\n\
                 \\n\
                 \\tbitselect2 : theorem bitSelect (63,3,2) = 5\n\
                 \\n\
                 \\tbitConcaTest : theorem bitConcat (170,85,8) = 43604\n\
                 \\n\
                 \end arith_bitwise"#) -}
93c942457c4f79760c6cfadf34bcc0c3
  bvcustomFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.bvcustomFile1) -}
f165c71c36633ee4eee6012174f70419
  bvcustomFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("bv_custom : theory\n\
                 \\n\
                 \begin\n\
                 \\n\
                 \  importing ints@mod_nat\n\
                 \\n\
                 \  v : var bvec[4]\n\
                 \  x : var bvec[1]\n\
                 \\n\
                 \  nat2sbv (i : nat)(N : nat) : RECURSIVE bvec [N]\n\
                 \    = (LAMBDA x: if (N > 1) then (nat2sbv(div(i,2))(N-1))o x else x endif) (if (mod(i, 2) = 1) then (bvec1) else (bvec0) endif)\n\
                 \    MEASURE N\n\
                 \\n\
                 \  test1 : theorem\n\
                 \    bv2nat(nat2sbv(0)(16)^(3,2)) = 0\n\
                 \\n\
                 \end bv_custom"#) -}
58de5d80210fc3250510191536e5839a
  clockTick :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.clockTick1) -}
32d7d5de486d93d9d4c4d16abdaabfbe
  clockTick1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ClockTick[delta_t: posreal]: THEORY\n\
                 \ BEGIN\n\
                 \\n\
                 \  IMPORTING Time\n\
                 \\n\
                 \  n: VAR nat\n\
                 \\n\
                 \  tick: TYPE = {t: time | EXISTS (n: nat): t = n * delta_t}\n\
                 \\n\
                 \  x: VAR tick\n\
                 \\n\
                 \  init(x): bool = (x = 0)\n\
                 \\n\
                 \  snd(x): bool = (x = delta_t) % t = 1\n\
                 \\n\
                 \  trd(x) : bool = (x = 2 * delta_t) % t = 2\n\
                 \\n\
                 \  fth(x) : bool = (x = 3 * delta_t) % t = 3\n\
                 \\n\
                 \  noninit_elem: TYPE = {x | NOT init(x)}\n\
                 \\n\
                 \  from_2nd_tick: TYPE = { x | NOT init(x) & NOT snd(x) }\n\
                 \\n\
                 \  from_3rd_tick: TYPE = { x | NOT init(x) & NOT snd(x) & NOT trd(x) }\n\
                 \\n\
                 \  y: VAR noninit_elem\n\
                 \\n\
                 \  yy: VAR from_2nd_tick\n\
                 \\n\
                 \  yyy: VAR from_3rd_tick\n\
                 \\n\
                 \  pre(y): tick = y - delta_t\n\
                 \\n\
                 \  pre_2(yy): tick = yy - 2*delta_t % new\n\
                 \\n\
                 \  pre_3(yyy): tick = yyy - 3*delta_t % new\n\
                 \\n\
                 \  next(x): tick = x + delta_t\n\
                 \\n\
                 \  rank(x): nat = x / delta_t\n\
                 \\n\
                 \  time_induct: LEMMA\n\
                 \    FORALL (P: pred[tick]):\n\
                 \      (FORALL x, n: rank(x) = n IMPLIES P(x)) IMPLIES (FORALL x: P(x))\n\
                 \\n\
                 \  time_induction: PROPOSITION\n\
                 \    FORALL (P: pred[tick]):\n\
                 \      (FORALL (t: tick): init(t) IMPLIES P(t)) AND\n\
                 \       (FORALL (t: noninit_elem): P(pre(t)) IMPLIES P(t))\n\
                 \       IMPLIES (FORALL (t: tick): P(t))\n\
                 \\n\
                 \  tick_PROPERTY0: LEMMA\n\
                 \    FORALL (n1, n2: nat):\n\
                 \      n1 * delta_t > n2 * delta_t IFF n1 * delta_t - delta_t >= n2 * delta_t\n\
                 \\n\
                 \  tick_PROPERTY1: LEMMA FORALL (t: tick | t > 0): t > x IFF pre(t) >= x\n\
                 \ END ClockTick\n\
                 \\n"#) -}
11aa81173a0689f16a470bc5f17e0f12
  definedOperators :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.definedOperators1) -}
08b61e8aab2c3a4cce9c044d021f52cb
  definedOperators1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("defined_operators[(IMPORTING Time) delta_t:posreal]: THEORY\n\
                 \%-------------------------------------------------------------------------------\n\
                 \%\n\
                 \% This file defines several operators that might be useful to specify\n\
                 \% required properties.\n\
                 \%\n\
                 \%-------------------------------------------------------------------------------\n\
                 \\n\
                 \BEGIN\n\
                 \\n\
                 \  IMPORTING ClockTick[delta_t]\n\
                 \  importing ints@mod_nat\n\
                 \\n\
                 \  Condition_type: TYPE = pred[tick]\n\
                 \\n\
                 \  t, t_1, t_2, t_r, t_f, ts, te: VAR tick\n\
                 \\n\
                 \  i, P: VAR Condition_type\n\
                 \\n\
                 \  duration: VAR tick\n\
                 \\n\
                 \%------------------------------------ logical gates --------------------------------------------\n\
                 \\n\
                 \% NOT gate\n\
                 \  neg(i,out:bool): bool = (out = NOT i)\n\
                 \\n\
                 \% AND gate\n\
                 \  conj(i1,i2,out:bool): bool = (out = (i1 & i2))\n\
                 \\n\
                 \  conj_3(i1,i2,i3,out:bool): bool = (out = (i1 & i2 & i3))\n\
                 \\n\
                 \  conj_4(i1,i2,i3,i4,out:bool): bool = (out = (i1 & i2 & i3 & i4))\n\
                 \\n\
                 \% OR gate\n\
                 \  disj(i1,i2,out:bool): bool = (out = (i1 OR i2))\n\
                 \\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \% Revised version\n\
                 \  disj(i1:pred[tick],\n\
                 \       i2:pred[tick],\n\
                 \       out:pred[tick]): bool =\n\
                 \     FORALL (t:tick):\n\
                 \          out(t) = (i1(t) OR i2(t))\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \\n\
                 \  disj_4(i1,i2,i3,i4,out:bool): bool = (out = (i1 OR i2 OR i3 OR i4))\n\
                 \\n\
                 \% Z_{-1}\n\
                 \  Z(i,out:pred[tick])(t): bool = \n\
                 \                       IF init(t) THEN (out(t) = False) \n\
                 \                       ELSE out(t) = i(pre(t)) ENDIF\n\
                 \\n\
                 \% --------------------------- Standard arithmetic functions ------------------------------------\n\
                 \\n\
                 \% ADD \" + \"\n\
                 \  add(i1,i2:int): int = (i1 + i2)\n\
                 \\n\
                 \  add(i1,i2:real): real = (i1 + i2)\n\
                 \\n\
                 \  add(i1,i2,out:real): bool = (out = (i1 + i2))\n\
                 \\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \% Revised version\n\
                 \  add(i1:[tick->real],\n\
                 \      i2:[tick->real],\n\
                 \      out:[tick->real]): bool =\n\
                 \     FORALL (t:tick):\n\
                 \         (out(t) = (i1(t) + i2(t)))\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \\n\
                 \  add(en,eno:pred[tick],i1,i2,out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = -1) & NOT eno(t)                    || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = (i1(pre(t)) + i2(pre(t)))) & eno(t) ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = i1(pre(t))) & NOT eno(t)            ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \  add_1(en,eno:pred[tick],i,out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = -1) & NOT eno(t)          || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = (i(pre(t)) + 1)) & eno(t) ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = i(pre(t))) & NOT eno(t)   ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \% MUL \" * \"\n\
                 \  mul(i1,i2:int): int = (i1 * i2)\n\
                 \\n\
                 \% SUB \" - \" \n\
                 \  sub(i1,i2:int): int = (i1 - i2)\n\
                 \\n\
                 \  sub(i1,i2:real): real = (i1 - i2)\n\
                 \\n\
                 \  sub(i1,i2,out:real): bool = (out = (i1 - i2))\n\
                 \\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \% Revised version\n\
                 \  sub(i1:[tick->real],\n\
                 \      i2:[tick->real],\n\
                 \      out:[tick->real]): bool =\n\
                 \     FORALL (t:tick):\n\
                 \          (out(t) = (i1(t) - i2(t)))\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \\n\
                 \  sub(en,eno:pred[tick],i1,i2,out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = -1) & NOT eno(t)                    || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = (i1(pre(t)) - i2(pre(t)))) & eno(t) ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = i1(pre(t))) & NOT eno(t)            ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \  sub_1(en,eno:pred[tick],i,out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = -1) & NOT eno(t)          || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = (i(pre(t)) - 1)) & eno(t) ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = i(pre(t))) & NOT eno(t)   ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \% DIV \" / \"\n\
                 \  int_div(i1:int, i2:{i:int| i /= 0}) : int = div (i1, i2)\n\
                 \\n\
                 \  div(i1:real,i2:{i:real| i /= 0 }): real = i1 / i2\n\
                 \\n\
                 \  div(i1:real,i2:{i:real| i /= 0 },out:real): bool = (out = (i1 / i2)) \n\
                 \\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \% Revised version\n\
                 \  div(i1:[tick->real],\n\
                 \      i2:[tick->{i:real| i /= 0 }],\n\
                 \      out:[tick->real]): bool =\n\
                 \     FORALL (t:tick):\n\
                 \         (out(t) = (i1(t) / i2(t)))\n\
                 \%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\
                 \\n\
                 \\n\
                 \% MOD\n\
                 \% defined in prelude\n\
                 \\n\
                 \% EXPT\n\
                 \% defined in prelude\n\
                 \\n\
                 \% MOVE \" := \"\n\
                 \% without EN/ENO \n\
                 \  move(i,out:int): bool = (out = i)\n\
                 \% with EN/ENO, output type: int\n\
                 \  move_int(en,eno:pred[tick],i,out:[tick->int])(t): bool = \n\
                 \%   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = 0) & NOT eno(t)           || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = i(t)) & eno(t)            ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t) ||\n\
                 \    ENDTABLE\n\
                 \% with EN/ENO, output type: bool\n\
                 \  move_bool(en,eno:pred[tick],i,out:pred[tick])(t): bool = \n\
                 \ %  FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = False) & NOT eno(t)       || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = i(t)) & eno(t)            ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \  move(en:pred[tick],i,out:[tick->int])(t): bool = % no ENO\n\
                 \ %  FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                 | (out(t) = 0)           || \n\
                 \     | NOT init(t) & en(t)     | (out(t) = i(t))        ||\n\
                 \     | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \\n\
                 \% ---------------------------- Standard comparison functions -----------------------------------\n\
                 \\n\
                 \% GT \" > \": decreasing sequence\n\
                 \  gt(i1,i2:int): bool = (i1 > i2)\n\
                 \\n\
                 \  gt(i1,i2:real): bool = (i1 > i2)\n\
                 \\n\
                 \  gt(i1,i2:int,out:bool): bool = (out = (i1 > i2))\n\
                 \\n\
                 \% GE \" >= \": monotonic sequence\n\
                 \  ge(i1,i2:int): bool = (i1 >= i2)\n\
                 \\n\
                 \  ge(i1,i2:real): bool = (i1 >= i2)\n\
                 \\n\
                 \% EQ \" = \": equality\n\
                 \  eq(i1,i2:int): bool = (i1 = i2)\n\
                 \\n\
                 \  eq(en,eno:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                                 | NOT out(t) & NOT eno(t)             || \n\
                 \     | NOT init(t) & en(t) & (i1(t) = i2(t))   | out(t) & eno(t)                     ||\n\
                 \     | NOT init(t) & en(t) &  (i1(t) /= i2(t)) | NOT out(t) & eno(t)                 ||\n\
                 \     | NOT init(t) & NOT en(t)                 | (out(t) = out(pre(t))) & NOT eno(t) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \  eq(en:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = % no ENO\n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                                 | NOT out(t)           || \n\
                 \     | NOT init(t) & en(t) & (i1(t) = i2(t))   | out(t)               ||\n\
                 \     | NOT init(t) & en(t) &  (i1(t) /= i2(t)) | NOT out(t)           ||\n\
                 \     | NOT init(t) & NOT en(t)                 | out(t) = out(pre(t)) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \% LE \" <= \": monotonic sequence\n\
                 \  le(i1,i2:int): bool = (i1 <= i2)\n\
                 \\n\
                 \  le(i1,i2:real): bool = (i1 <= i2)\n\
                 \\n\
                 \% LT \" < \": increasing sequence\n\
                 \  lt(i1,i2:int): bool = (i1 < i2)\n\
                 \\n\
                 \  lt(i1,i2:int,out:bool): bool = (out = (i1 < i2))\n\
                 \\n\
                 \  lt(i1,i2:real): bool = (i1 < i2)\n\
                 \\n\
                 \  lt(en,eno:pred[tick],i1,i2:[tick->int],out:pred[tick])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                                | NOT out(t) & NOT eno(t)             || \n\
                 \     | NOT init(t) & en(t) & (i1(t) < i2(t))  | out(t) & eno(t)                     ||\n\
                 \     | NOT init(t) & en(t) & (i1(t) >= i2(t)) | NOT out(t) & eno(t)                 ||\n\
                 \     | NOT init(t) & NOT en(t)                | (out(t) = out(pre(t))) & NOT eno(t) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \% NE \" <> \": inequality (non-extensible)\n\
                 \  ne(i1,i2:int): bool = (i1 /= i2)\n\
                 \\n\
                 \%------------------------------ Standard selection functions -------------------------------------\n\
                 \\n\
                 \% SEL \"SEL\"\n\
                 \  sel(g:bool,i1,i2:int): int = IF g = False THEN i1 ELSE i2 ENDIF\n\
                 \\n\
                 \  sel(en,eno:pred[tick],g:pred[tick],in0,in1:int,out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                        | (out(t) = 0) & NOT eno(t)           || \n\
                 \     | NOT init(t) & en(t) & NOT g(t) | (out(t) = in0) & eno(t)             ||\n\
                 \     | NOT init(t) & en(t) & g(t)     | (out(t) = in1) & eno(t)             ||\n\
                 \     | NOT init(t) & NOT en(t)        | (out(t) = out(pre(t))) & NOT eno(t) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \  sel(g:pred[tick],in0,in1:[tick->int],out:[tick->int])(t): bool = \n\
                 \   FORALL t:\n\
                 \    TABLE\n\
                 \     | init(t)                | out(t) = 0      || \n\
                 \     | NOT init(t) & NOT g(t) | out(t) = in0(t) ||\n\
                 \     | NOT init(t) & g(t)     | out(t) = in1(t) ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \% MIN \" MIN \"\n\
                 \  min(i1,i2:int): int = IF i1 <= i2 THEN i1 ELSE i2 ENDIF\n\
                 \\n\
                 \% MAX \" MAX \"\n\
                 \  max(i1,i2:int): int = IF i1 >= i2 THEN i1 ELSE i2 ENDIF\n\
                 \\n\
                 \% LIMIT\n\
                 \  limit(i,mn,mx:int): int = min(max(i,mn),mx)\n\
                 \\n\
                 \  limit(en,eno:pred[tick],i,mn,mx,out:[tick->int])(t): bool = \n\
                 \    FORALL t:\n\
                 \      TABLE\n\
                 \        | init(t)                 |  (out(t) = 128) & NOT eno(t)                   ||\n\
                 \        | NOT init(t) & en(t)     | (out(t) = min(max(i(t),mn(t)),mx(t))) & eno(t) ||\n\
                 \        | NOT init(t) & NOT en(t) | (out(t) = out(pre(t))) & NOT eno(t)            ||\n\
                 \       ENDTABLE\n\
                 \\n\
                 \% MUX \" MUX \", it is an ERROR if k in not within [0,n-1], here n = 4\n\
                 \  mux(k:{i:int| i >= 0 & i <= 3 },i0,i1,i2,i3:int): int = \n\
                 \    TABLE\n\
                 \     | k = 0 | i0 ||\n\
                 \     | k = 1 | i1 ||\n\
                 \     | k = 2 | i2 ||\n\
                 \     | k = 3 | i3 ||\n\
                 \    ENDTABLE\n\
                 \\n\
                 \%--------------- Some operators may be useful for timers properties spec. ------------------------\n\
                 \\n\
                 \  before(t_1,t_2:tick): bool = (t_1 < t_2)\n\
                 \\n\
                 \  after(t_1,t_2:tick): bool = (t_2 < t_1)\n\
                 \\n\
                 \  rising?(i)(t): bool = IF init(t) THEN i(t) ELSE NOT i(pre(t)) & i(t) ENDIF\n\
                 \\n\
                 \  falling?(i)(t): bool = IF init(t) THEN i(t) ELSE i(pre(t)) & NOT i(t) ENDIF\n\
                 \\n\
                 \  pulse?(i)(t_r:tick, t_f:{ t: tick | t > t_r }): bool =\n\
                 \       IF init(t_r) THEN i(t_r)\n\
                 \       ELSE rising?(i)(t_r) & falling?(i)(t_f) & \n\
                 \            FORALL (t_n: { t: tick | t > t_r & t < t_f }): i(t_n)\n\
                 \       ENDIF\n\
                 \\n\
                 \  Held_For(P,duration)(t): bool = % slightly odified from Jason's version\n\
                 \    EXISTS(t_j:tick):\n\
                 \       (t - t_j >= duration) & (FORALL (t_n: tick | t_n >= t_j & t_n <= t): P(t_n))\n\
                 \\n\
                 \  Held_For_ts(P,duration,ts)(t): bool = % new one indicating the time when condition P becomes True\n\
                 \    (t - ts >= duration) & (FORALL (t_n: tick | t_n >= ts & t_n <= t): P(t_n))\n\
                 \\n\
                 \   Held_For_ts_te(P,duration,ts,te): bool = \n\
                 \    (te - ts = duration) & (FORALL (t_n: tick | t_n >= ts & t_n <= te): P(t_n))\n\
                 \\n\
                 \  consecutive_ticks?(t_1,t_2:tick): bool = (t_1 < t_2 & t_2 - t_1 = delta_t)\n\
                 \\n\
                 \  consecutive_rising_edges?(i:pred[tick],t_m,t_n:tick): bool = \n\
                 \     FORALL (t_j,t_k:tick):\n\
                 \       consecutive_ticks?(t_j,t_k) & NOT (NOT i(t_j) & i(t_k)) &\n\
                 \       rising?(i)(t_m) & rising?(i)(t_n)\n\
                 \\n\
                 \\n\
                 \\n\
                 \  \n\
                 \\n\
                 \END defined_operators\n\
                 \\n"#) -}
1ae377f8909d7bdf499aadb30fe63d82
  fifoFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# SourceFiles.fifoFile1) -}
7d2f8a47af97cb59819a0aca19537525
  fifoFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("FIFO [T: TYPE] : theory\n\
                 \\n\
                 \begin\n\
                 \\n\
                 \\tFIFO : TYPE = \n\
                 \\t  [# data : [nat -> T]\n\
                 \\t   , enqptr : nat\n\
                 \\t   , deqptr : nat\n\
                 \\t   , max : nat\n\
                 \\t   #]\n\
                 \\n\
                 \\tenq (f: FIFO, val : T) : FIFO = f\n\
                 \\t  with [ data := f`data with  [ (f`enqptr) := val ]\n\
                 \\t\t\t    , enqptr := f`enqptr + 1\n\
                 \\t\t\t    ]\n\
                 \\n\
                 \\tfirst (f : FIFO) : T = f`data(f`deqptr)\n\
                 \\n\
                 \\tdeq (f : FIFO) : FIFO = f\n\
                 \\t   WITH [ deqptr := f`deqptr + 1\n\
                 \\t\t\t    ]\n\
                 \\n\
                 \\tclear (f : FIFO) : FIFO = f\n\
                 \\t   WITH [ enqptr := 0\n\
                 \\t   \t, deqptr := 0\n\
                 \\t\t]\n\
                 \\n\
                 \\tnotEmpty (f : FIFO) : bool = NOT (f`enqptr = f`deqptr)\n\
                 \\n\
                 \\tnotFull (f : FIFO) : bool = NOT (f`enqptr - f`deqptr = f`max)\n\
                 \\n\
                 \\tmkFIFO (f : FIFO, m : nat) : bool = \n\
                 \\t   f = f with [ enqptr := 0\n\
                 \\t       \t      , deqptr := 0\n\
                 \\t\t      , max := m\n\
                 \\t\t      ]\n\
                 \\n\
                 \\n\
                 \end FIFO\n"#) -}
de55bd7872e545f216ac1b396cff23e3
  maybeFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.maybeFile1) -}
6a0fc2d62ad21af98307d762996bd94a
  maybeFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("% Maybe.pvs\n\
                 \% author = Nicholas Moore\n\
                 \% last updated August 27, 2019\n\
                 \Maybe[A : TYPE, null : A] : THEORY\n\
                 \BEGIN\n\
                 \\n\
                 \Maybe : TYPE = \n\
                 \  [# valid : bool\n\
                 \   , value : A\n\
                 \  #]\n\
                 \\n\
                 \Nothing?(m : Maybe) : bool =  not m`valid\n\
                 \\n\
                 \Just?(m : Maybe) : bool = m`valid\n\
                 \\n\
                 \Nothing : Maybe = \n\
                 \  (# valid := False\n\
                 \   , value := null\n\
                 \  #)\n\
                 \\n\
                 \Just(val : A) : Maybe =\n\
                 \  (# valid := True\n\
                 \   , value := val\n\
                 \  #)\n\
                 \\n\
                 \END Maybe"#) -}
9998d8030e47354480493db6fd325386
  monadFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   SourceFiles.monadFile1) -}
269f3a5d5136932a2a369361926f2fa7
  monadFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("monad: THEORY\n\
                 \ BEGIN\n\
                 \\n\
                 \ m[a: TYPE]: TYPE\n\
                 \\n\
                 \ return[a: TYPE]: [a -> m[a]];\n\
                 \\n\
                 \ >>=[a, b: TYPE](x: m[a], f: [a -> m[b]]): m[b] % infix\n\
                 \% >>=[a, b: TYPE](x: m[a])(f: [a -> m[b]]): m[b] = x >>= f; % Curried\n\
                 \\n\
                 \ >>[a, b: TYPE](x: m[a])(y: m[b]): m[b] = x >>= (lambda (z: a): y);\n\
                 \\n\
                 \ % join :: Monad m => m (m a) -> m a\n\
                 \ % join x = x >>= id\n\
                 \\n\
                 \ join[a: TYPE](x: m[m[a]]): m[a] = x >>= id[m[a]]\n\
                 \\n\
                 \ bind_return[a, b: TYPE]: AXIOM\n\
                 \   FORALL (x: a, f: [a -> m[b]]): (return[a](x) >>= f) = f(x)\n\
                 \\n\
                 \ bind_ret2[a: TYPE]: AXIOM\n\
                 \   FORALL (x: m[a]): (x >>= return[a]) = x\n\
                 \\n\
                 \END monad\n\
                 \\n\
                 \Maybe[a: type]: datatype\n\
                 \begin\n\
                 \  Nothing: Nothing?\n\
                 \  Just(Val: a): Just?\n\
                 \end Maybe\n\
                 \   \n\
                 \% instance Monad Maybe where\n\
                 \%   return = Just\n\
                 \%   (Just x) >>= g = g x\n\
                 \%   Nothing  >>= _ = Nothing\n\
                 \\n\
                 \maybe: THEORY\n\
                 \BEGIN\n\
                 \ importing Maybe\n\
                 \\n\
                 \ bind[a, b: type](x:Maybe[a])(f: [a -> Maybe[b]]): Maybe[b]\n\
                 \   = cases x of Nothing: Nothing, Just(y): f(y) endcases\n\
                 \\n\
                 \ maybe: THEORY =  monad{{m[a: type] := Maybe[a],\n\
                 \                  return[a: type] := Just[a],\n\
                 \                  >>=[a, b: type](x:Maybe[a], f: [a -> Maybe[b]])\n\
                 \                         := cases x of Nothing: Nothing, Just(y): f(y) endcases\n\
                 \                 }}\n\
                 \\n\
                 \  f(x: int): Maybe[int] = if rem(2)(x) = 0 then Nothing else Just(2 * x) endif\n\
                 \\n\
                 \  g(x: int): Maybe[int] = if rem(3)(x) = 0 then Nothing else Just(3 * x) endif\n\
                 \\n\
                 \  h(x: int): Maybe[int] = if rem(5)(x) = 0 then Nothing else Just(5 * x) endif\n\
                 \\n\
                 \  k(x: int): Maybe[int] = f(x) >>= g >>= h\n\
                 \              % bind(bind(f(x))(g))(h)\n\
                 \ \n\
                 \end maybe"#) -}
394aa1ce155c229e786ad64c4f5635ed
  readMe :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# SourceFiles.readMe1) -}
55fc9dfbe3f0b0d6489d966f1f60d6e8
  readMe1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("NAME:\n\
                 \\tBSV And PVS Lexographic Interlinguistic Processor\n\
                 \\n\
                 \SYNOPSIS:\n\
                 \\tbaplip [COMMAND] [INPUT FILE] [TOP LEVEL MODULE] [OUTPUT DIRECTORY]\n\
                 \\n\
                 \DESCRIPTION:\n\
                 \\tThis software tool is intended to lexically analyse and process Bluespec Systemverilog (BSV) packages and translate them into the higher-order proof logic of the Prototype Verification System (PVS).  This software can also reverse the translation, producing BSV packages from PVS theories, but only insofar as they conform to the syntactic conventions used to generate PVS files to begin with. Also included are utilities which lexically analyse both languages, and reproduce the design in it's original language, after having passed through BAPLIP's internal abstract syntactic representations.  \n\
                 \\n\
                 \COMMANDS:\n\
                 \\t\n\
                 \\thelp - displays this readme file.\n\
                 \\t\texample: $ baplip help\n\
                 \\n\
                 \\tbsv2pvs input_file top_module output_directory \n\
                 \\t\tTranslates a bsv package into a series of pvs theories.\n\
                 \\t\tinput_file - Hardware description in BSV.  Please ensure that the description has been fully typechecked before translation.\n\
                 \\t\ttop_module - Specifies the top-level module contained in the specified file. \n\
                 \\t\toutput_directory - the newly created PVS theories will be saved to the directory here specified.\n\
                 \\n\
                 \\tbsv2bsv input_file output_directory \n\
                 \\t\tParses and regenerates a BSV package.\n\
                 \\t\tinput_file - Hardware description in BSV.  Please ensure that the description has been fully typechecked before translation.\n\
                 \\t\toutput_directory - the newly created BSV package will be saved to the directory here specified.\n\
                 \\n\
                 \        tsp2bsv input_file output_file\n\
                 \                Generates BSV file from tabular specification file\n\
                 \                input_file - tabular specification file\n\
                 \                output_file - Name of generated BSV file.  \n\
                 \\t\n\
                 \\ttsp2pvs input_file output_directory \n\
                 \\t\tParses a tabular specification file and generates both a BSV file and a set of PVS theories.\n\
                 \\t\tinput_file - Top-level file of a set of pvs theories. All pvs theories must conform to the grammar of generated pvs files.\n\
                 \\t\toutput_directory - the newly created PVS theories will be saved to the directory here specified.\n\
                 \\n\
                 \AUTHOR:\n\
                 \\tWritten by Nicholas Moore using the Parsec parsing library for Haskell\n\
                 \\n"#) -}
477c80ad12135d4b8251ae2e7afb056a
  timeFile :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# SourceFiles.timeFile1) -}
a0096a4a3aece90bed9cec869d20b588
  timeFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Time: THEORY\n\
                 \ BEGIN\n\
                 \\n\
                 \  time: TYPE+ = nonneg_real\n\
                 \\n\
                 \  non_initial_time: TYPE+ = posreal\n\
                 \ END Time\n\
                 \\n"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

